<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Semaik.</title>
  
  <subtitle>技术博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-04T01:58:37.148Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Semaik.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keepalived</title>
    <link href="http://example.com/2020/11/03/Keepalived/"/>
    <id>http://example.com/2020/11/03/Keepalived/</id>
    <published>2020-11-03T07:49:00.000Z</published>
    <updated>2020-11-04T01:58:37.148Z</updated>
    
    <content type="html"><![CDATA[<p>Keepalived：最初给LVS负载均衡集群中的服务节点提供健康检查功能，后来因为集成了VRRP协议，可以实现解决服务节点的单点故障，提高服务的可靠性，支持高可用集群的部署</p><p>VRRP协议</p><p>VRRP（虚拟路由冗余协议）：由多台物理路由器组成一台高性能的虚拟路由器，多个物理路由器之间通过优先级举出主节点，其它节点为从节点，从节点不工作只接收主节点发来的VRRP通告，主节点管理虚拟IP并对外提供服务，主节点定时给从节点发送VRRP通告，通告中包含着主节点的优先级，当从节点在计时器的时间到了之后接收不到主机点发送的VRRP通告时，就认为主节点不可用，此时，从节点就会根据优先级选举出新的主节点并接管虚拟IP对外提供服务，这个切换过程对于客户端来说是透明的，这样解决了单点故障，保证了服务的可用性</p><p>无故ARP（免费ARP）：特点是arp广播包中源IP目的IP源MAC目的MAC都是发送方的，也就是都是虚拟IP和虚拟MAC，</p><p>作用：</p><p>1.可以检测是否有地址冲突</p><p>2.可以更新终端设备的ARP缓存表</p><h5 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h5><table><thead><tr><th align="center">系统</th><th align="center">IP</th><th align="center">服务</th></tr></thead><tbody><tr><td align="center">Centos7.4</td><td align="center">1.1.1.1</td><td align="center">keepalived主</td></tr><tr><td align="center">Centos7.4</td><td align="center">1.1.1.2</td><td align="center">keepalived备</td></tr><tr><td align="center">Centos7.4</td><td align="center">1.1.1.3</td><td align="center">Nginx</td></tr><tr><td align="center">Centos7.4</td><td align="center">1.1.1.4</td><td align="center">Nginx</td></tr><tr><td align="center">*</td><td align="center">1.1.1.111</td><td align="center">VIP</td></tr><tr><td align="center">Centos7.4</td><td align="center">1.1.1.10</td><td align="center">Client</td></tr></tbody></table><h5 id="配置keepalived主"><a href="#配置keepalived主" class="headerlink" title="配置keepalived主"></a>配置keepalived主</h5><h6 id="使用yum安装keepalived服务"><a href="#使用yum安装keepalived服务" class="headerlink" title="使用yum安装keepalived服务"></a>使用yum安装keepalived服务</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install keepalived</span><br></pre></td></tr></table></figure><h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;<span class="comment">//默认全局配置</span></span><br><span class="line">   notification_email &#123;<span class="comment">//指定该keepalived节点故障时接收邮件的收信人</span></span><br><span class="line">     acassen<span class="meta">@firewall</span>.loc</span><br><span class="line">     failover<span class="meta">@firewall</span>.loc</span><br><span class="line">     sysadmin<span class="meta">@firewall</span>.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen<span class="meta">@firewall</span>.loc<span class="comment">//keepalived故障时发送邮件的发信人</span></span><br><span class="line">   smtp_server <span class="number">192.168</span>.<span class="number">200.1</span><span class="comment">//指定邮件服务器的IP，stmp简单邮件传输协议，使用端口25</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span><span class="comment">//与邮件服务器的连接超时时间，单位s，可以自定义</span></span><br><span class="line">   router_id master<span class="comment">//该节点的唯一表示，用于发邮件时表示该节点，可以是主机名，也可以是自己指定的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;<span class="comment">//定义一个VRRP实例，处于同一个组中的节点使用的实例名字应该一致，默认使用名字VI_1</span></span><br><span class="line">    state MASTER<span class="comment">//该节点的状态，MASTER为主，BACKUP为备，必须大写，但是只是用来标识节点状态，节点主备是由优先级决定的</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ens33</span>//指定主节点从那块网卡发送<span class="title">VRRP</span>通告</span></span><br><span class="line"><span class="class">    <span class="title">virtual_router_id</span> 51//指定该实例所属的虚拟路由组的<span class="title">id</span>，属于同一个组的节点使用的<span class="title">id</span>应该相同，<span class="title">id</span>取值范围为0-255</span></span><br><span class="line"><span class="class">    <span class="title">priority</span> 100//指定该节点的优先级，属于同一个组的节点优先级最高为主节点，取值范围为1-255，配置超过取值范围的值都默认视为100</span></span><br><span class="line"><span class="class">添加：<span class="title">nopreempt</span>//将该节点设置为非抢占模式</span></span><br><span class="line"><span class="class">    <span class="title">advert_int</span> 1//主节点每隔1<span class="title">s</span>发送一次<span class="title">VRRP</span>通告，时间可以自定义</span></span><br><span class="line"><span class="class">    <span class="title">authentication</span> </span>&#123;<span class="comment">//配置主备节点之间的认证方式以及密码</span></span><br><span class="line">        auth_type PASS<span class="comment">//认证类型，主备必须一致，有PASS和HA两种，PASS密码是明文的，HA是密文的</span></span><br><span class="line">        auth_pass <span class="number">1111</span><span class="comment">//认证密钥，主备必须一致，只识别前八位</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;<span class="comment">//配置虚拟IP，只有主节点才会拥有该地址，只能通过ip add查看，ifconfig是查看不到的</span></span><br><span class="line">        <span class="number">1.1</span>.<span class="number">1.111</span>/<span class="number">8</span><span class="comment">//与物理机IP同网段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server <span class="number">1.1</span>.<span class="number">1.111</span> <span class="number">80</span> &#123;<span class="comment">//指定LVS集群使用的虚拟IP以及端口</span></span><br><span class="line">    delay_loop <span class="number">6</span><span class="comment">//指定对服务节点进行健康检查的间隔时间</span></span><br><span class="line">    lb_algo rr <span class="comment">//该集群的使用的调度算法</span></span><br><span class="line">    lb_kind DR<span class="comment">//该集群的调度模式</span></span><br><span class="line">    persistence_timeout <span class="number">0</span><span class="comment">//服务节点的连接时间，0表示为短链接</span></span><br><span class="line">    protocol TCP<span class="comment">//集群中节点之间通过TCP协议通信</span></span><br><span class="line">    netmask <span class="number">255.0</span>.<span class="number">0.0</span><span class="comment">//VIP掩码</span></span><br><span class="line"></span><br><span class="line">real_server <span class="number">1.1</span>.<span class="number">1.3</span> <span class="number">80</span> &#123;<span class="comment">//向集群中添加服务节点</span></span><br><span class="line">   weight <span class="number">1</span><span class="comment">//设置节点的权重，默认为1，如果权重为0则表示该节点不可用</span></span><br><span class="line">   TCP_CHECK &#123;<span class="comment">//启用TCP健康检查</span></span><br><span class="line">            connect_timeout <span class="number">1</span><span class="comment">//对服务节点做健康检查的连接超时时间，1s可以自定义</span></span><br><span class="line">            nb_get_retry <span class="number">3</span><span class="comment">//所健康检查的重试次数，可自定义</span></span><br><span class="line">            delay_before_retry <span class="number">1</span><span class="comment">//每次健康检查之间间隔时间，可自定义</span></span><br><span class="line">            connect_port <span class="number">80</span><span class="comment">//针对哪个端口进行TCP检查</span></span><br><span class="line">            &#125;</span><br><span class="line"> &#125;</span><br><span class="line">real_server <span class="number">1.1</span>.<span class="number">1.4</span> <span class="number">80</span> &#123;</span><br><span class="line">   weight <span class="number">1</span></span><br><span class="line">   TCP_CHECK &#123;</span><br><span class="line">            connect_timeout <span class="number">3</span></span><br><span class="line">            nb_get_retry <span class="number">3</span></span><br><span class="line">            delay_before_retry <span class="number">3</span></span><br><span class="line">            connect_port <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="将配置文件拷贝给keepalived备"><a href="#将配置文件拷贝给keepalived备" class="headerlink" title="将配置文件拷贝给keepalived备"></a>将配置文件拷贝给keepalived备</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># scp /etc/keepalived/keepalived.conf root@1.1.1.2:/etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><h6 id="修改备的配置文件"><a href="#修改备的配置文件" class="headerlink" title="修改备的配置文件"></a>修改备的配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/keepalived/keepalived.conf</span><br><span class="line">router_id backup</span><br><span class="line">state BACKUP</span><br><span class="line">priority <span class="number">90</span></span><br></pre></td></tr></table></figure><h6 id="启动主从的keepalived服务"><a href="#启动主从的keepalived服务" class="headerlink" title="启动主从的keepalived服务"></a>启动主从的keepalived服务</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart keepalived</span><br></pre></td></tr></table></figure><h6 id="配置Nginx（两台同样步骤）"><a href="#配置Nginx（两台同样步骤）" class="headerlink" title="配置Nginx（两台同样步骤）"></a>配置Nginx（两台同样步骤）</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置虚拟IP</span><br><span class="line"># cd /etc/sysconfig/network-scripts/</span><br><span class="line"># cp ifcfg-lo ifcfg-lo:1</span><br><span class="line"># vi ifcfg-lo:1</span><br><span class="line">DEVICE=lo:<span class="number">1</span></span><br><span class="line">IPADDR=<span class="number">1.1</span>.<span class="number">1.111</span><span class="comment">//虚拟IP</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.255</span></span><br><span class="line">NAME=lo:<span class="number">1</span></span><br><span class="line"># 多余的删除</span><br></pre></td></tr></table></figure><blockquote><p>可以通过ifconfig命令来配置不过是临时IP重启失效</p></blockquote><blockquote><p>ifconfig lo:1 1.1.1.111 netmask 255.255.255.255</p></blockquote><h6 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h6 id="修改系统内核文件"><a href="#修改系统内核文件" class="headerlink" title="修改系统内核文件"></a>修改系统内核文件</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.conf.lo.arp_ignore=<span class="number">1</span></span><br><span class="line">net.ipv4.conf.<span class="keyword">default</span>.arp_ignore=<span class="number">1</span></span><br><span class="line">net.ipv4.conf.all.arp_ignore=<span class="number">1</span></span><br><span class="line">net.ipv4.conf.lo.arp_announce=<span class="number">2</span></span><br><span class="line">net.ipv4.conf.<span class="keyword">default</span>.arp_announce=<span class="number">2</span></span><br><span class="line">net.ipv4.conf.all.arp_announce=<span class="number">2</span></span><br><span class="line"># sysctl -p</span><br></pre></td></tr></table></figure><h6 id="修改web首页文件（第二台web改成NO-2）"><a href="#修改web首页文件（第二台web改成NO-2）" class="headerlink" title="修改web首页文件（第二台web改成NO.2）"></a>修改web首页文件（第二台web改成NO.2）</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;Wecom to nginx NO.1&quot; &gt; /usr/local/nginx/html/index.html</span><br></pre></td></tr></table></figure><h6 id="放行防护墙"><a href="#放行防护墙" class="headerlink" title="放行防护墙"></a>放行防护墙</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"># firewall-cmd --add-service=nginx --permanent</span><br><span class="line"># firewall-cmd --reload</span><br><span class="line"># setenforce 0</span><br></pre></td></tr></table></figure><h6 id="客户端验证"><a href="#客户端验证" class="headerlink" title="客户端验证"></a>客户端验证</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 1.1.1.111</span><br><span class="line">wecom to nginx NO.<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Keepalived：最初给LVS负载均衡集群中的服务节点提供健康检查功能，后来因为集成了VRRP协议，可以实现解决服务节点的单点故障，提高服务的可靠性，支持高可用集群的部署&lt;/p&gt;
&lt;p&gt;VRRP协议&lt;/p&gt;
&lt;p&gt;VRRP（虚拟路由冗余协议）：由多台物理路由器组成一台高</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境更新Python3.8</title>
    <link href="http://example.com/2020/11/03/Linux%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0Python3-8/"/>
    <id>http://example.com/2020/11/03/Linux%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0Python3-8/</id>
    <published>2020-11-03T04:41:00.000Z</published>
    <updated>2020-11-03T05:13:26.097Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进入Python官网下载软件包：https-www-python-org-downloads"><a href="#进入Python官网下载软件包：https-www-python-org-downloads" class="headerlink" title="进入Python官网下载软件包：https://www.python.org/downloads/"></a>进入Python官网下载软件包：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></h4><p><img src="/images/pasted-101.png" alt="upload successful"></p><blockquote><p>下载需要更新的软件包</p></blockquote><p><img src="/images/pasted-102.png" alt="upload successful"></p><h4 id="我就拿3-8-5软件包举例"><a href="#我就拿3-8-5软件包举例" class="headerlink" title="我就拿3.8.5软件包举例"></a>我就拿3.8.5软件包举例</h4><h6 id="创建一个存储目录"><a href="#创建一个存储目录" class="headerlink" title="创建一个存储目录"></a>创建一个存储目录</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# mkdir /usr/local/python3-8</span><br></pre></td></tr></table></figure><h6 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# yum install gcc libffi-devel zlib* openssl-devel</span><br></pre></td></tr></table></figure><h6 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# unzip Python-3.8.5.zip</span><br><span class="line">[root@one /]# cd Python-3.8.5/</span><br><span class="line">[root@one Python-3.8.5]# ./configure --prefix=/usr/local/python3-8 &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h6 id="给予权限"><a href="#给予权限" class="headerlink" title="给予权限"></a>给予权限</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# chmod 777 /usr/local/python3-8/</span><br></pre></td></tr></table></figure><h6 id="备份Python2的文件"><a href="#备份Python2的文件" class="headerlink" title="备份Python2的文件"></a>备份Python2的文件</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# cp /usr/bin/python /usr/bin/python2.bak</span><br><span class="line">[root@one /]# rm -rf /usr/bin/python</span><br></pre></td></tr></table></figure><h6 id="将Python3的文件链接到-usr-bin-下"><a href="#将Python3的文件链接到-usr-bin-下" class="headerlink" title="将Python3的文件链接到/usr/bin/下"></a>将Python3的文件链接到/usr/bin/下</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# ln -s /usr/local/python3-8/bin/python3.8 /usr/bin/pyhton</span><br></pre></td></tr></table></figure><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><p><img src="/images/pasted-103.png" alt="upload successful"></p><p><img src="/images/pasted-104.png" alt="upload successful"></p><blockquote><p>如果pip的版本未更换成3.8就需要手动操作了</p></blockquote><h6 id="如果Yum出现以下错误"><a href="#如果Yum出现以下错误" class="headerlink" title="如果Yum出现以下错误"></a>如果Yum出现以下错误</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# yum -y install openssl*</span><br><span class="line">  File <span class="string">&quot;/usr/bin/yum&quot;</span>, line <span class="number">30</span></span><br><span class="line">    except KeyboardInterrupt, e:</span><br><span class="line">                            ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">总下载量：<span class="number">3.9</span> M</span><br><span class="line">Downloading packages:</span><br><span class="line">  File <span class="string">&quot;/usr/libexec/urlgrabber-ext-down&quot;</span>, line <span class="number">28</span></span><br><span class="line">    except OSError, e:</span><br><span class="line">                  ^</span><br></pre></td></tr></table></figure><h6 id="以上报错需要修改yum解释器"><a href="#以上报错需要修改yum解释器" class="headerlink" title="以上报错需要修改yum解释器"></a>以上报错需要修改yum解释器</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@one /]# vi /usr/bin/yum</span><br><span class="line">[root@one /]# vi /usr/libexec/urlgrabber-ext-down</span><br><span class="line"># 都修改成同样的python2.7</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-105.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;进入Python官网下载软件包：https-www-python-org-downloads&quot;&gt;&lt;a href=&quot;#进入Python官网下载软件包：https-www-python-org-downloads&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7部署轻量级自动化运维工具pssh</title>
    <link href="http://example.com/2020/10/13/Centos7%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7pssh/"/>
    <id>http://example.com/2020/10/13/Centos7%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7pssh/</id>
    <published>2020-10-13T07:31:00.000Z</published>
    <updated>2020-10-13T07:50:56.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>pssh是由python编写，可以在多台服务器执行命令的工具。在服务器越来越多的企业这种自动化运维工具越来越火。</p></blockquote><h5 id="下载pssh安装包"><a href="#下载pssh安装包" class="headerlink" title="下载pssh安装包"></a>下载pssh安装包</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# wget https://files.pythonhosted.org/packages/60/9a/8035af3a7d3d1617ae2c7c174efa4f154e5bf9c24b36b623413b38be8e4a/pssh-2.3.1.tar.gz</span><br></pre></td></tr></table></figure><h5 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen</span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"><span class="function">Enter file in which to save the <span class="title">key</span> <span class="params">(/root/.ssh/id_rsa)</span>: </span></span><br><span class="line"><span class="function">Enter <span class="title">passphrase</span> <span class="params">(empty <span class="keyword">for</span> no passphrase)</span>: </span></span><br><span class="line"><span class="function">Enter same passphrase again: </span></span><br><span class="line"><span class="function">Your identification has been saved in /root/.ssh/id_rsa.</span></span><br><span class="line"><span class="function">Your <span class="keyword">public</span> key has been saved in /root/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="function">The key fingerprint is:</span></span><br><span class="line"><span class="function">SHA256:3antaxjGw+hdgfSlrXLYhUe5vgHe9b0ehh/gUY9E8Eg root@localhost.localdomain</span></span><br><span class="line"><span class="function">The key&#x27;s randomart image is:</span></span><br><span class="line"><span class="function">+---[RSA 2048]----+</span></span><br><span class="line"><span class="function">|            E... |</span></span><br><span class="line"><span class="function">|          .. ++  |</span></span><br><span class="line"><span class="function">|         . o.*oo |</span></span><br><span class="line"><span class="function">|         ...*o*.o|</span></span><br><span class="line"><span class="function">|        S+.+o@..+|</span></span><br><span class="line"><span class="function">|        . OoB B o|</span></span><br><span class="line"><span class="function">|       . o.B.o *.|</span></span><br><span class="line"><span class="function">|        . o.. +.o|</span></span><br><span class="line"><span class="function">|           .o..o |</span></span><br><span class="line"><span class="function">+----[SHA256]-----+</span></span><br><span class="line"><span class="function">[root@localhost ~]# cd /root/.ssh/</span></span><br><span class="line"><span class="function">[root@localhost .ssh]# ls</span></span><br><span class="line"><span class="function">id_rsa  id_rsa.pub</span></span><br><span class="line"><span class="function">[root@localhost .ssh]# ssh-copy-id 172.16.1.112</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: Source of <span class="title">key</span><span class="params">(s)</span> to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="function">The authenticity of host &#x27;172.16.1.112 <span class="params">(<span class="number">172.16</span><span class="number">.1</span><span class="number">.112</span>)</span>&#x27; can&#x27;t be established.</span></span><br><span class="line"><span class="function">ECDSA key fingerprint is SHA256:yFvaxR1x5YDhhe+6xR/Ou6Sm+YPYvPAoiLVKt9mAnXA.</span></span><br><span class="line"><span class="function">ECDSA key fingerprint is MD5:0d:c4:79:bc:36:7a:a4:82:95:4f:d5:d0:a3:c8:7d:2e.</span></span><br><span class="line"><span class="function">Are you sure you want to <span class="keyword">continue</span> <span class="title">connecting</span> <span class="params">(yes/no)</span>? yes</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new <span class="title">key</span><span class="params">(s)</span>, to filter out any that are already installed</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: 1 <span class="title">key</span><span class="params">(s)</span> remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="function">root@172.16.1.112&#x27;s password: </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Number of <span class="title">key</span><span class="params">(s)</span> added: 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Now <span class="keyword">try</span> logging into the machine, with:   &quot;ssh &#x27;172.16.1.112&#x27;&quot;</span></span><br><span class="line"><span class="function">and check to make sure that only the <span class="title">key</span><span class="params">(s)</span> you wanted were added.</span></span><br><span class="line"><span class="function">[root@localhost .ssh]# ssh-copy-id 172.16.1.16</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: Source of <span class="title">key</span><span class="params">(s)</span> to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="function">The authenticity of host &#x27;172.16.1.16 <span class="params">(<span class="number">172.16</span><span class="number">.1</span><span class="number">.16</span>)</span>&#x27; can&#x27;t be established.</span></span><br><span class="line"><span class="function">ECDSA key fingerprint is SHA256:ANzlXzrGA87YLI2vzkPJ/iNPiSQ5JStJc95948jE8aw.</span></span><br><span class="line"><span class="function">ECDSA key fingerprint is MD5:f9:f1:1b:5a:99:64:d8:d8:e9:9b:e6:bb:c3:d5:bd:e7.</span></span><br><span class="line"><span class="function">Are you sure you want to <span class="keyword">continue</span> <span class="title">connecting</span> <span class="params">(yes/no)</span>? yes</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new <span class="title">key</span><span class="params">(s)</span>, to filter out any that are already installed</span></span><br><span class="line"><span class="function">/usr/bin/ssh-copy-id: INFO: 1 <span class="title">key</span><span class="params">(s)</span> remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="function">root@172.16.1.16&#x27;s password: </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Number of <span class="title">key</span><span class="params">(s)</span> added: 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Now <span class="keyword">try</span> logging into the machine, with:   &quot;ssh &#x27;172.16.1.16&#x27;&quot;</span></span><br><span class="line"><span class="function">and check to make sure that only the <span class="title">key</span><span class="params">(s)</span> you wanted were added.</span></span><br></pre></td></tr></table></figure><h5 id="测试免密登录"><a href="#测试免密登录" class="headerlink" title="测试免密登录"></a>测试免密登录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh 172.16.1.112</span><br><span class="line">Last login: Tue Jun  <span class="number">2</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">24</span> <span class="number">2020</span> from <span class="number">172.16</span>.<span class="number">1.16</span></span><br><span class="line">[root@localhost ~]# ssh 172.16.1.16</span><br><span class="line">Last login: Tue Jun  <span class="number">2</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span> <span class="number">2020</span> from <span class="number">172.16</span>.<span class="number">1.100</span></span><br></pre></td></tr></table></figure><h5 id="测试pssh"><a href="#测试pssh" class="headerlink" title="测试pssh"></a>测试pssh</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 将IP写入到文件中</span><br><span class="line">[root@localhost ~]# echo &quot;172.16.1.112&quot; &gt;&gt; aaa</span><br><span class="line">[root@localhost ~]# echo &quot;172.16.1.16&quot; &gt;&gt; aaa</span><br><span class="line">[root@localhost ~]# cat aaa</span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.112</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.16</span></span><br><span class="line"># 批量执行date命令</span><br><span class="line">[root@localhost ~]# pssh -h aaa -l root -P &quot;date&quot;</span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.16</span>: <span class="number">2020</span>年 <span class="number">06</span>月 <span class="number">02</span>日 星期二 <span class="number">09</span>:<span class="number">59</span>:<span class="number">48</span> CST</span><br><span class="line">[<span class="number">1</span>] <span class="number">09</span>:<span class="number">59</span>:<span class="number">48</span> [SUCCESS] <span class="number">172.16</span>.<span class="number">1.16</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.112</span>: <span class="number">2020</span>年 <span class="number">06</span>月 <span class="number">02</span>日 星期二 <span class="number">09</span>:<span class="number">59</span>:<span class="number">48</span> CST</span><br><span class="line">[<span class="number">2</span>] <span class="number">09</span>:<span class="number">59</span>:<span class="number">48</span> [SUCCESS] <span class="number">172.16</span>.<span class="number">1.112</span></span><br><span class="line"># 查看磁盘</span><br><span class="line">[root@localhost ~]# pssh -h aaa -l root -P &quot;lsblk&quot;</span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.16</span>: NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">20</span>G  <span class="number">0</span> disk </span><br><span class="line">├─sda1            <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─sda2            <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">19</span>G  <span class="number">0</span> part </span><br><span class="line">  ├─centos-root <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">17</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  └─centos-swap <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">2</span>G  <span class="number">0</span> lvm  [SWAP]</span><br><span class="line">sr0              <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span>  <span class="number">4.2</span>G  <span class="number">0</span> rom  </span><br><span class="line">[<span class="number">1</span>] <span class="number">10</span>:<span class="number">13</span>:<span class="number">02</span> [SUCCESS] <span class="number">172.16</span>.<span class="number">1.16</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.112</span>: NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">20</span>G  <span class="number">0</span> disk </span><br><span class="line">├─sda1            <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─sda2            <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">19</span>G  <span class="number">0</span> part </span><br><span class="line">  ├─centos-root <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">17</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  └─centos-swap <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">2</span>G  <span class="number">0</span> lvm  [SWAP]</span><br><span class="line">sr0              <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span>  <span class="number">4.2</span>G  <span class="number">0</span> rom  </span><br><span class="line">[<span class="number">2</span>] <span class="number">10</span>:<span class="number">13</span>:<span class="number">03</span> [SUCCESS] <span class="number">172.16</span>.<span class="number">1.112</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;pssh是由python编写，可以在多台服务器执行命令的工具。在服务器越来越多的企业这种自动化运维工具越来越火。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;下载pssh安装包&quot;&gt;&lt;a href=&quot;#下载pssh安装包&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HTTP方式共享YUM软件仓库</title>
    <link href="http://example.com/2020/10/13/HTTP%E6%96%B9%E5%BC%8F%E5%85%B1%E4%BA%ABYUM%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/2020/10/13/HTTP%E6%96%B9%E5%BC%8F%E5%85%B1%E4%BA%ABYUM%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93/</id>
    <published>2020-10-13T07:04:00.000Z</published>
    <updated>2020-10-13T07:28:04.042Z</updated>
    
    <content type="html"><![CDATA[<h5 id="两台机器"><a href="#两台机器" class="headerlink" title="两台机器"></a>两台机器</h5><table><thead><tr><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>1.1.1.5</td><td>YUM仓库</td></tr><tr><td>1.1.1.3</td><td>测试机器</td></tr></tbody></table><p><strong>1.1.1.5通过apache镜像目录共享</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y httpd</span><br></pre></td></tr></table></figure><p>在/var/www/html下面创建centos目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /var/www/html/centos</span><br></pre></td></tr></table></figure><p>挂载镜像到/var/www/html/aaa下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mount CentOS-7-x86_64-DVD-1611.iso /var/www/html/centos/</span><br><span class="line">[root@localhost ~]# ls /var/www/html/centos/</span><br><span class="line">CentOS_BuildTag  EULA  images    LiveOS    repodata              RPM-GPG-KEY-CentOS-Testing-<span class="number">7</span></span><br><span class="line">EFI              GPL   isolinux  Packages  RPM-GPG-KEY-CentOS-<span class="number">7</span>  TRANS.TBL</span><br></pre></td></tr></table></figure><p>测试浏览器访问</p><p><img src="/images/pasted-99.png" alt="upload successful"></p><p>在1.1.1.3配置yum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/yum.repos.d/yum.repo</span><br><span class="line">[yum]</span><br><span class="line">name=yum</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">baseurl=http:<span class="comment">//1.1.1.5/centos                       </span></span><br></pre></td></tr></table></figure><p>测试安装软件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install vsftpd -y</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">正在解决依赖关系</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">总下载量：<span class="number">169</span> k</span><br><span class="line">安装大小：<span class="number">348</span> k</span><br><span class="line">Downloading packages:</span><br><span class="line">vsftpd-<span class="number">3.0</span>.<span class="number">2</span>-<span class="number">22.</span>el7.x86_64.rpm | <span class="number">169</span> kB <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">正在安装 : vsftpd-<span class="number">3.0</span>.<span class="number">2</span>-<span class="number">22.</span>el7.x86_64 <span class="number">1</span>/<span class="number">1</span></span><br><span class="line">验证中 : vsftpd-<span class="number">3.0</span>.<span class="number">2</span>-<span class="number">22.</span>el7.x86_64 <span class="number">1</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">vsftpd.x86_64 <span class="number">0</span>:<span class="number">3.0</span>.<span class="number">2</span>-<span class="number">22.</span>el7</span><br><span class="line"></span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;两台机器&quot;&gt;&lt;a href=&quot;#两台机器&quot; class=&quot;headerlink&quot; title=&quot;两台机器&quot;&gt;&lt;/a&gt;两台机器&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbod</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>实现容器的底层技术</title>
    <link href="http://example.com/2020/09/27/%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2020/09/27/%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/</id>
    <published>2020-09-27T07:04:00.000Z</published>
    <updated>2020-09-27T07:12:50.780Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-90.png" alt="upload successful"></p><p>通讯的前提：<br>一个网段=一个vlan=一个广播域</p><h5 id="实现容器的底层技术："><a href="#实现容器的底层技术：" class="headerlink" title="实现容器的底层技术："></a>实现容器的底层技术：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cgroup是实现资源的限制</span><br><span class="line">namespace是实现资源的隔离（六项内容）：</span><br><span class="line">  mount：容器内目录可以任意mount互相是不影响的</span><br><span class="line">  uts：使容器拥有自己的主机名</span><br><span class="line">  ipc：使容器拥有自己的共享内存和信号量不和host主机混在一起</span><br><span class="line">  network：让每个容器拥有独立的ip、网卡、路由等资源</span><br><span class="line">  user：让容器能自己管理用户，host不能看到容器内的用户</span><br><span class="line">  pid：容器内的pid不同于host中对应进程的pid，容器中的pid=<span class="number">1</span>的进程也不是host的init 进程。也就是说，容器拥有自己独立的一套pid</span><br><span class="line">   重要的问题：因为container的pid=<span class="number">1</span>的进程部署init，导致container无法使用systemd 管理程序</span><br><span class="line">  解决方法：<span class="number">1</span>、提权使<span class="number">1</span>号进程是init/systemd； <span class="number">2</span>、通过启动命令启动程序，不通过systemd <span class="number">1</span>、提权：   管理程序</span><br><span class="line">      docker run -it --restart always -d --name web  --privileged [需要提权的容器] /sbin/init</span><br><span class="line">      <span class="number">2</span>、通过启动命令来启动程序，不要通过systemd管理程序。每个systemd在启动程序 的时候都是用XXXX.sersvice文件内的Execstart文件</span><br></pre></td></tr></table></figure><p>查询网桥信息：</p><p>brctl show</p><p><img src="/images/pasted-91.png" alt="upload successful"><br>docker的原生网络</p><p>查看：docker network ls</p><p>容器的原生网络</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">none：封闭意味着隔离，生成随机码，生成二维码等，对安全性要求高，并不需要联网用</span><br><span class="line">host：容器和物理机使用完全相同的网络栈</span><br><span class="line">joined：容器使用另一个容器的网络栈 </span><br><span class="line"># docker run -it --rm --name test --network container:web busybox sh</span><br><span class="line">bridge：应用最广泛和默认的网络，必须要懂</span><br><span class="line"># 当创建一个容器并运行会在物理机和容器内上出现一对网卡，物理机网卡没有ip是用 来链接创建容器内的网卡，当容器内要访问外部网络的时候   比如ping百度  数据从 容器内的网卡转到容器外的veth pair，然后这个网段由</span><br><span class="line">docker0去与外界练习通信</span><br></pre></td></tr></table></figure><h5 id="docker网络是怎么实现隔离的呢？"><a href="#docker网络是怎么实现隔离的呢？" class="headerlink" title="docker网络是怎么实现隔离的呢？"></a>docker网络是怎么实现隔离的呢？</h5><p>采用iptables防火墙进行隔离</p><h5 id="嵌套旧容器运行新容器"><a href="#嵌套旧容器运行新容器" class="headerlink" title="嵌套旧容器运行新容器"></a>嵌套旧容器运行新容器</h5><p>运行一个基于http镜像的web容器</p><p><img src="/images/pasted-92.png" alt="upload successful"><br>进入容器后查看IP（这里是查看不了的，因为httpd只是一个服务镜像，没有其他使用命令，属于纯净的服务镜像）</p><p><img src="/images/pasted-93.png" alt="upload successful"><br>这时，我们应该怎样查看这个容器的IP地址呢？</p><p>再次运行一个基于busybox镜像的web容器（busybox镜像所有基础命令可以使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --network container:web busybox</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-94.png" alt="upload successful"></p><p>参数：</p><blockquote><p>–rm：容器停止后自动删除</p></blockquote><blockquote><p>–network container:</p></blockquote><blockquote><p>用于连接某台容器，使得两台容器使用同一个网络，也就是使用同一个IP<br>这时我们查看到的IP地址和web容器里的IP地址是相同的。</p></blockquote><p><img src="/images/pasted-95.png" alt="upload successful"></p><h5 id="我们应该怎么样去查看容器和宿主机之间的网络连接呢？"><a href="#我们应该怎么样去查看容器和宿主机之间的网络连接呢？" class="headerlink" title="我们应该怎么样去查看容器和宿主机之间的网络连接呢？"></a>我们应该怎么样去查看容器和宿主机之间的网络连接呢？</h5><p>首先查看桥接信息</p><p><img src="/images/pasted-96.png" alt="upload successful"></p><p>进去容器内敲ip a（会有网卡信息标识）</p><p><img src="/images/pasted-97.png" alt="upload successful"></p><p>退出容器在宿主机敲ip a（找到21对应20的标识）</p><p><img src="/images/pasted-98.png" alt="upload successful"></p><h5 id="实现一个容器连接多个网卡的命令"><a href="#实现一个容器连接多个网卡的命令" class="headerlink" title="实现一个容器连接多个网卡的命令"></a>实现一个容器连接多个网卡的命令</h5><p>docker network connect 网卡名称 连接到哪个容器的名称</p><p>例：<code>docker network connect my_net nginx</code></p><p>作用：可以实现不同网络间通信</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/pasted-90.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;通讯的前提：&lt;br&gt;一个网段=一个vlan=一个广播域&lt;/p&gt;
&lt;h5 id=&quot;实现容器的底层技术：&quot;&gt;&lt;a href=&quot;#实现容器的底层技术：</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>解决在Docker容器中不能使用system管理</title>
    <link href="http://example.com/2020/09/27/%E8%A7%A3%E5%86%B3%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8system%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2020/09/27/%E8%A7%A3%E5%86%B3%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8system%E7%AE%A1%E7%90%86/</id>
    <published>2020-09-27T07:00:00.000Z</published>
    <updated>2020-09-27T07:02:51.353Z</updated>
    
    <content type="html"><![CDATA[<p><strong>例：httpd服务</strong></p><p><img src="/images/pasted-85.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@a4120181b4d3 /]# systemctl start httpd</span><br><span class="line">报错：Failed to get D-Bus connection: Operation not permitted</span><br></pre></td></tr></table></figure><p><strong>解决方法一：</strong></p><p>运行容器时提权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -tid --name centos_1 --privileged=<span class="keyword">true</span> centos:latest /sbin/init</span><br></pre></td></tr></table></figure><blockquote><p>-privileged：提权操作</p></blockquote><p><strong>解决方法二：</strong><br>进入配置文件</p><p>vi /usr/lib/systemd/system/httpd.service</p><p><img src="/images/pasted-86.png" alt="upload successful"><br>复制/usr/sbin/httpd</p><p>启动httpd服务</p><p><img src="/images/pasted-87.png" alt="upload successful"></p><p><img src="/images/pasted-88.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;例：httpd服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-85.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH连接Docker容器</title>
    <link href="http://example.com/2020/09/27/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5Docker%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2020/09/27/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5Docker%E5%AE%B9%E5%99%A8/</id>
    <published>2020-09-27T06:54:00.000Z</published>
    <updated>2020-09-27T06:59:17.978Z</updated>
    
    <content type="html"><![CDATA[<p><strong>实验：使用ssh管理docker的容器</strong></p><p><strong>实验要求：</strong></p><blockquote><p>1、ssh可以登录容器<br>2、在容器内yum 安装httpd并且启动</p></blockquote><p><strong>实验步骤</strong></p><p>将docker的centos镜像实例化名为sshd的容器<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name sshd centos /bin/bash</span><br><span class="line">cd3c512d6cd959263b1c94e19781d7213831aad714a2e962ade7c0adc28c510e</span><br></pre></td></tr></table></figure><br>进入容器，并进行安装sshd和启动sshd的相应操作<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it sshd /bin/bash</span><br><span class="line">[root@cd3c512d6cd9 /]# yum -y install openssh-server openssh-clients password iproute net-tools</span><br><span class="line">[root@cd3c512d6cd9 /]# passwd root   # 设置root密码</span><br><span class="line">[root@cd3c512d6cd9 /]# cat /usr/lib/systemd/system/sshd.service</span><br><span class="line"> 找到以下</span><br><span class="line">ExecStart=/usr/sbin/sshd -D $OPTIONS</span><br><span class="line"> /usr/sbin/sshd -D这个用来启动yum安装的服务，几乎所有yum安装的都有这个</span><br><span class="line">[root@5c46b791e8d2 /]# /usr/sbin/sshd -D</span><br><span class="line"> 执行之后发现报错，找不到<span class="number">3</span>个密钥文件</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ed25519_key</span><br><span class="line">sshd: no hostkeys available -- exiting.</span><br><span class="line"> 生成密钥，分别存放到它要找到三个路径中</span><br><span class="line">[root@cd3c512d6cd9 /]# ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N &#x27;&#x27;</span><br><span class="line">[root@cd3c512d6cd9 /]# ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N &#x27;&#x27;</span><br><span class="line">[root@cd3c512d6cd9 /]# ssh-keygen -q -t dsa -f /etc/ssh/ssh_host_ed25519_key -N &#x27;&#x27;</span><br><span class="line"> </span><br><span class="line">keygen参数：</span><br><span class="line">    -q：不在终端显示密钥</span><br><span class="line">    -b：字节长度</span><br><span class="line">    -f：指定密钥文件路径</span><br><span class="line"> </span><br><span class="line"> 可以通过cat去查看这三个密钥</span><br><span class="line">[root@cd3c512d6cd9 /]# vi /etc/ssh/sshd_config </span><br><span class="line"> 修此文件是得ssh以进程方式运行</span><br><span class="line"> 这是pam模块使用sshd，容器中没有这个模块，所以需要注释</span><br><span class="line">UsePAM no  </span><br><span class="line"> 解开以下注释并修改值为no</span><br><span class="line">UsePrivilegeSeparation sandbox  <span class="comment">//将sandbox改为no</span></span><br><span class="line"> 以下解开注释，允许超级用户登录</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><br>启动sshd服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@5c46b791e8d2 /]# /usr/sbin/sshd -D &amp;</span><br><span class="line">[root@5c46b791e8d2 /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>然后就可以通过ssh来使用物理机连接docker容器sshd<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# ssh root@172.17.0.2</span><br><span class="line">The authenticity of host <span class="string">&#x27;172.17.0.2 (172.17.0.2)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:8M08usrRzTfDZjM9cfZhM+DAMn8d4O6/xW3ULlpM17o.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8b:72:3b:0f:15:ac:f4:8f:24:f0:ed:fa:40:12:c3:ae.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span><span class="number">172.17</span>.<span class="number">0.2</span><span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@172.17.0.2&#x27;</span>s password:</span><br></pre></td></tr></table></figure><br>安装httpd并启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@5c46b791e8d2 ~]# yum -y install httpd</span><br><span class="line">[root@5c46b791e8d2 ~]# find / -name httpd.service</span><br><span class="line">/usr/lib/systemd/system/httpd.service</span><br><span class="line">[root@5c46b791e8d2 ~]# cat /usr/lib/systemd/system/httpd.service</span><br><span class="line">ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND</span><br><span class="line">[root@5c46b791e8d2 ~]# /usr/sbin/httpd  &amp;</span><br><span class="line">AH00558: httpd: Could not reliably determine the server<span class="string">&#x27;s fully qualified</span></span><br><span class="line"><span class="string">domain name, using 172.17.0.2. Set the &#x27;</span>ServerName<span class="string">&#x27; directive globally to suppress this message</span></span><br><span class="line"><span class="string">[root@5c46b791e8d2 ~]# netstat -anpt | grep 80</span></span><br><span class="line"><span class="string">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      191/httpd </span></span><br><span class="line"><span class="string">[root@5c46b791e8d2 ~]# curl 172.17.0.2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;实验：使用ssh管理docker的容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验要求：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、ssh可以登录容器&lt;br&gt;2、在容器内yum 安装httpd并且启动&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>对容器进行cpu的使用控制</title>
    <link href="http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8Ccpu%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8Ccpu%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8E%A7%E5%88%B6/</id>
    <published>2020-09-27T06:50:00.000Z</published>
    <updated>2020-09-27T06:54:14.057Z</updated>
    
    <content type="html"><![CDATA[<h5 id="控制容器中cpu使用的优先级"><a href="#控制容器中cpu使用的优先级" class="headerlink" title="控制容器中cpu使用的优先级"></a>控制容器中cpu使用的优先级</h5><p>默认情况下所有的容器都平等的使用cpu，并没有限制，Docker可以通过内容进行限制</p><p><strong>关键词</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c/--cpu-shares:控制cpu优先级</span><br><span class="line">--cpuset-cpus:指定使用哪块cpu</span><br></pre></td></tr></table></figure><p><strong>实验环境</strong></p><p>将计算机调整为单核cpu，内存4G</p><p><strong>实验目的</strong></p><p>启动多个容器，指定容器使用cpu的优先级</p><p><strong>实验步骤</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start docker</span><br></pre></td></tr></table></figure><p>启动一个名为aa的容器，并指定cpu优先级为1024</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name aa --cpu-shares 1024 centos /bin/bash</span><br><span class="line"><span class="number">196380</span>b6bbb7a044e2aafec7059b37db573f9612f3705d93aa1d8975e94ffad7</span><br></pre></td></tr></table></figure><p>在启动一个名为bb的容器，并指定cpu优先级为512</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name bb --cpu-shares 512 centos /bin/bash</span><br><span class="line"><span class="number">03d</span>ad75a9447768480e758e044857d6306bd73b89bccb2725594ead830d38e28</span><br></pre></td></tr></table></figure><p>我们可以在物理机的cgroup目录中看到限制容器使用cpu的优先级，需要用到以上启动容器时返回的容器id</p><p>查看aa容器的CPU优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /sys/fs/cgroup/cpu/docker/196...ad7</span><br><span class="line"> 可以看到该目录中存放了，docker程序中，aa容器的所有cpu资源的控制项</span><br><span class="line">[root@localhost 196...ad7]# ls</span><br><span class="line">cgroup.clone_children  cpuacct.usage         cpu.rt_period_us   notify_on_release</span><br><span class="line">cgroup.event_control   cpuacct.usage_percpu  cpu.rt_runtime_us  tasks</span><br><span class="line">cgroup.procs           cpu.cfs_period_us     cpu.shares</span><br><span class="line">cpuacct.stat           cpu.cfs_quota_us      cpu.stat</span><br><span class="line">[root@localhost 196...ad7]# cat tasks</span><br><span class="line">3750  # 这个文件里面存放了这个容器在物理机运行的pid号</span><br><span class="line">[root@localhost 196...ad7]# ps aux | grep 3750</span><br><span class="line">root   <span class="number">3750</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">11828</span>  <span class="number">1656</span> pts/<span class="number">0</span>  Ss+  <span class="number">08</span>:<span class="number">29</span>  <span class="number">0</span>:<span class="number">00</span> /bin/bash</span><br><span class="line">root   <span class="number">4369</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">112712</span>   <span class="number">956</span> pts/<span class="number">2</span>  R+   <span class="number">08</span>:<span class="number">37</span>  <span class="number">0</span>:<span class="number">00</span> grep --color=auto <span class="number">3750</span></span><br><span class="line"> 查看该容器的cpu优先级</span><br><span class="line"></span><br><span class="line">[root@localhost 196...ad7]# cat cpu.shares</span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure><p>查看bb容器的cpu优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">同样是docker目录下的另一个容器</span><br><span class="line">[root@localhost 196...ad7]# cd ../03d...e28/</span><br><span class="line">[root@localhost 03d...e28]# cat cpu.shares</span><br><span class="line"><span class="number">512</span></span><br></pre></td></tr></table></figure><p>docker程序的cpu优先级</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 03d...e28]# cd ..</span><br><span class="line">[root@localhost docker]# cat cpu.shares </span><br><span class="line">1024  # docker在主机内的cpu优先级</span><br><span class="line">[root@localhost docker]# cat tasks</span><br></pre></td></tr></table></figure><p><strong>注意目录结构</strong></p><p>下载一个docker用来测试的镜像</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull progrium/stress</span><br></pre></td></tr></table></figure><p>使用测试镜像启动容器，用来测试查看cpu优先级</p><p><code>--cpu用来限制cpu工作线程的数量</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name cc -c 512 progrium/stress --cpu 1</span><br><span class="line"><span class="number">6</span>cff87f45ac88f0a27a250f099dc46d4a2dcdc191f2599a73b3e649a5ed91e80</span><br><span class="line">[root@localhost ~]# docker run -itd --name dd -c 1024 progrium/stress --cpu 1</span><br><span class="line"><span class="number">2</span>a3f49cccb8addc69684bf96d3d95fc438768d98d942c60cd6a5df05b435068a</span><br></pre></td></tr></table></figure><p>使用top查看两个测试线程（stress ）的cpu使用率，也就是谁优先使用多少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# top</span><br><span class="line"> 关键信息如下，一个<span class="number">66.8</span>%，一个<span class="number">32.9</span>%，两个加起来几乎等于<span class="number">100</span></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line">  <span class="number">4842</span> root      <span class="number">20</span>   <span class="number">0</span>    <span class="number">7304</span>    <span class="number">100</span>      <span class="number">0</span> R <span class="number">66.8</span>  <span class="number">0.0</span>   <span class="number">1</span>:<span class="number">25.19</span> stress </span><br><span class="line">  <span class="number">4789</span> root      <span class="number">20</span>   <span class="number">0</span>    <span class="number">7304</span>     <span class="number">96</span>      <span class="number">0</span> R <span class="number">32.9</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">58.09</span> stress</span><br></pre></td></tr></table></figure><p>cpu的优先级只有在多个容器使用时才生效，说明他俩会抢占cpu资源，如果只有一个容器，即使设置了cpu优先级，它也会把cpu资源尽可能多的去使用</p><p>控制容器使用某块cpu<br>分配第一个和第二个cpu给容器（–cpuset只适用于多核cpu时使用）</p><p>第一个cpu从0起计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name cpu --cpuset-cpus=<span class="string">&quot;0,1&quot;</span> centos /bin/bash</span><br><span class="line">[root@8cb4e22abd77 /]# cat /sys/fs/cgroup/cpuset/cpuset.cpus</span><br><span class="line"><span class="number">0</span>-<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;控制容器中cpu使用的优先级&quot;&gt;&lt;a href=&quot;#控制容器中cpu使用的优先级&quot; class=&quot;headerlink&quot; title=&quot;控制容器中cpu使用的优先级&quot;&gt;&lt;/a&gt;控制容器中cpu使用的优先级&lt;/h5&gt;&lt;p&gt;默认情况下所有的容器都平等的使用cpu，并没</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>对容器进行内存容量控制</title>
    <link href="http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%AE%B9%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%AE%B9%E9%87%8F%E6%8E%A7%E5%88%B6/</id>
    <published>2020-09-27T06:47:00.000Z</published>
    <updated>2020-09-27T06:49:49.677Z</updated>
    
    <content type="html"><![CDATA[<h5 id="对容器内存的限制"><a href="#对容器内存的限制" class="headerlink" title="对容器内存的限制"></a>对容器内存的限制</h5><p>内存分为：物理内存和swap内存</p><p><strong>关键词</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--memory：限制内存的使用容量</span><br><span class="line">--memory-swap：限制内存+swap的大小</span><br></pre></td></tr></table></figure><p>启动一个限制内存使用的容器testa，如果不指定–memory-swap的话，默认它的大小和内存一样大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name testa -m 200M --memory-swap 300M centos /bin/bash</span><br><span class="line">aa90dc55398b2f927c1111bcfa3090502a3b42c3eb538895a1ddadbe556fdf9d</span><br></pre></td></tr></table></figure><p>进入容器testa中查看内存和swap大小，在容器中看到的其实也还是物理机的内存大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it testa /bin/bash</span><br><span class="line">[root@aa90dc55398b /]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           <span class="number">3770</span>        <span class="number">1051</span>         <span class="number">992</span>          <span class="number">33</span>        <span class="number">1726</span>        <span class="number">2431</span></span><br><span class="line">Swap:          <span class="number">2047</span>           <span class="number">0</span>        <span class="number">2047</span></span><br></pre></td></tr></table></figure><p>第二种查看，最为准确，在宿主机的cgroup中查看，内存大小为200M</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /sys/fs/cgroup/memory/docker/aa9...f9d/memory.limit_in_bytes </span><br><span class="line"><span class="number">209715200</span></span><br></pre></td></tr></table></figure><p>还可以通过测试也能够测出来</p><p>内存+swap总量是300M，内存占200M，所以swap是100M，启动容器运行</p><p>测试使用280M是否可以正常运行，一直在输出说明正常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it -m 200M --memory-swap 300M progrium/stress --vm 1 --vm-bytes 280M</span><br><span class="line">stress: info: [<span class="number">1</span>] dispatching hogs: <span class="number">0</span> cpu, <span class="number">0</span> io, <span class="number">1</span> vm, <span class="number">0</span> hdd</span><br><span class="line">stress: dbug: [<span class="number">1</span>] using backoff sleep of <span class="number">3000</span>us</span><br><span class="line">stress: dbug: [<span class="number">1</span>] --&gt; hogvm worker <span class="number">1</span> [<span class="number">6</span>] forked</span><br><span class="line">stress: dbug: [<span class="number">6</span>] allocating <span class="number">293601280</span> bytes ...</span><br><span class="line">stress: dbug: [<span class="number">6</span>] touching bytes in strides of <span class="number">4096</span> bytes ...</span><br><span class="line">stress: dbug: [<span class="number">6</span>] freed <span class="number">293601280</span> bytes</span><br><span class="line">stress: dbug: [<span class="number">6</span>] allocating <span class="number">293601280</span> bytes ...</span><br><span class="line">stress: dbug: [<span class="number">6</span>] touching bytes in strides of <span class="number">4096</span> bytes ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>测试使用380M是否可以正常运行，自动跳出，则不能运行，说明380M超出了内存范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it -m 200M --memory-swap 300M progrium/stress --vm 1 --vm-bytes </span><br><span class="line"><span class="number">380</span>M</span><br><span class="line">stress: info: [<span class="number">1</span>] dispatching hogs: <span class="number">0</span> cpu, <span class="number">0</span> io, <span class="number">1</span> vm, <span class="number">0</span> hdd</span><br><span class="line">stress: dbug: [<span class="number">1</span>] using backoff sleep of <span class="number">3000</span>us</span><br><span class="line">stress: dbug: [<span class="number">1</span>] --&gt; hogvm worker <span class="number">1</span> [<span class="number">6</span>] forked</span><br><span class="line">stress: dbug: [<span class="number">6</span>] allocating <span class="number">398458880</span> bytes ...</span><br><span class="line">stress: dbug: [<span class="number">6</span>] touching bytes in strides of <span class="number">4096</span> bytes ...</span><br><span class="line">stress: FAIL: [<span class="number">1</span>] (<span class="number">416</span>) &lt;-- worker <span class="number">6</span> got signal <span class="number">9</span></span><br><span class="line">stress: WARN: [<span class="number">1</span>] (<span class="number">418</span>) now reaping child worker processes</span><br><span class="line">stress: FAIL: [<span class="number">1</span>] (<span class="number">422</span>) kill error: No such process</span><br><span class="line">stress: FAIL: [<span class="number">1</span>] (<span class="number">452</span>) failed run completed in <span class="number">1</span>s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;对容器内存的限制&quot;&gt;&lt;a href=&quot;#对容器内存的限制&quot; class=&quot;headerlink&quot; title=&quot;对容器内存的限制&quot;&gt;&lt;/a&gt;对容器内存的限制&lt;/h5&gt;&lt;p&gt;内存分为：物理内存和swap内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>对容器进行磁盘读写速率控制</title>
    <link href="http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%AF%BB%E5%86%99%E9%80%9F%E7%8E%87%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2020/09/27/%E5%AF%B9%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%AF%BB%E5%86%99%E9%80%9F%E7%8E%87%E6%8E%A7%E5%88%B6/</id>
    <published>2020-09-27T06:45:00.000Z</published>
    <updated>2020-09-27T06:46:43.594Z</updated>
    
    <content type="html"><![CDATA[<h5 id="对容器磁盘读写进行控制"><a href="#对容器磁盘读写进行控制" class="headerlink" title="对容器磁盘读写进行控制"></a>对容器磁盘读写进行控制</h5><p><strong>关键词</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--blkil-weight：硬盘优先级，谁先使用硬盘</span><br><span class="line">bps/iops：bps是每秒读写的数据量，iops是每秒的io次数</span><br><span class="line">都有利于提升数据读取的速度，要么单次读取数据大，要么读取数据小但是次数多</span><br><span class="line">--device-read-bps：磁盘每秒读取速度</span><br><span class="line">--device-write-bps：磁盘每秒写入速度</span><br><span class="line">--device-read-iops：磁盘每秒io读取速度</span><br><span class="line">--device-write-iops：磁盘每秒io写入速度</span><br></pre></td></tr></table></figure><h6 id="控制一"><a href="#控制一" class="headerlink" title="控制一"></a>控制一</h6><p>启动一个容器，并限制该容器在磁盘的写入速度为30MB/s</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it --device-write-bps /dev/sda:30MB centos /bin/bash</span><br></pre></td></tr></table></figure><p>使用dd命令测试，发现写入速率为29.9MB/s</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@34b03090013e /]# time dd if=dev/zero of=test.out bs=1M count=800 oflag=direct </span><br><span class="line"> 测试硬盘性能，读取<span class="number">1</span>M的数据，读取<span class="number">800</span>次</span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">838860800</span> bytes (<span class="number">839</span> MB) copied, <span class="number">28.0896</span> s, <span class="number">29.9</span> MB/s</span><br><span class="line"> </span><br><span class="line">real<span class="number">0</span>m28.<span class="number">217</span>s</span><br><span class="line">user<span class="number">0</span>m0.<span class="number">006</span>s</span><br><span class="line">sys<span class="number">0</span>m1.<span class="number">566</span>s</span><br></pre></td></tr></table></figure><p>启动一个没有限制磁盘写入的容器，进行相同的测试，写入速率为1.2GB/s，这是正常的写入速率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@54e235363474 /]# time dd if=dev/zero of=test.out bs=1M count=800 oflag=direct </span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">838860800</span> bytes (<span class="number">839</span> MB) copied, <span class="number">0.715951</span> s, <span class="number">1.2</span> GB/s</span><br><span class="line"> </span><br><span class="line">real<span class="number">0</span>m0.<span class="number">718</span>s</span><br><span class="line">user<span class="number">0</span>m0.<span class="number">000</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">633</span>s</span><br></pre></td></tr></table></figure><h6 id="控制二"><a href="#控制二" class="headerlink" title="控制二"></a>控制二</h6><p>创建并允许一个容器，使它对硬盘的每秒读写速度不超过100MB</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it --device-read-bps /dev/sda:100MB --device-write-bps /dev/sda:100MB centos /bin/bash</span><br><span class="line">[root@5e5f92eb145e /]# time dd if=/dev/zero of=test.out bs=1M count=800 oflag=direct </span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">800</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">838860800</span> bytes (<span class="number">839</span> MB) copied, <span class="number">7.9597</span> s, <span class="number">105</span> MB/s</span><br><span class="line"> </span><br><span class="line">real<span class="number">0</span>m7.<span class="number">963</span>s</span><br><span class="line">user<span class="number">0</span>m0.<span class="number">005</span>s</span><br><span class="line">sys<span class="number">0</span>m1.<span class="number">966</span>s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;对容器磁盘读写进行控制&quot;&gt;&lt;a href=&quot;#对容器磁盘读写进行控制&quot; class=&quot;headerlink&quot; title=&quot;对容器磁盘读写进行控制&quot;&gt;&lt;/a&gt;对容器磁盘读写进行控制&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile构建Nginx镜像</title>
    <link href="http://example.com/2020/09/27/Dockerfile%E6%9E%84%E5%BB%BANgxin%E9%95%9C%E5%83%8F/"/>
    <id>http://example.com/2020/09/27/Dockerfile%E6%9E%84%E5%BB%BANgxin%E9%95%9C%E5%83%8F/</id>
    <published>2020-09-27T06:31:00.000Z</published>
    <updated>2020-11-03T07:03:57.433Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Dockerfile构建nginx镜像"><a href="#Dockerfile构建nginx镜像" class="headerlink" title="Dockerfile构建nginx镜像"></a>Dockerfile构建nginx镜像</h5><blockquote><p>要求：dockerfile做nginx源码镜像。并且启动后容器后可以直接启动。</p></blockquote><p>首先拖入nginx的tar包到物理机路径，与Dockerfile文件放在同一目录</p><p>编写Dockerfile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim Dockerfile </span><br><span class="line">FROM centos  # 调用docker中已下载的centos镜像</span><br><span class="line">MAINTAINER FeiYi  # 作者名为FeiYi</span><br><span class="line"> 安装环境所需包</span><br><span class="line">RUN yum -y install net-tools iproute pcre-devel openssl-devel gcc gcc-c++ make zlib-devel elinks</span><br><span class="line">ADD nginx-1.11.1.tar.gz /usr/src  # 解压本地host中的nginx包到容器中的/usr/src目录</span><br><span class="line">ENV NGINX_DIR /usr/src/nginx-1.11.1 # 定义环境变量</span><br><span class="line">WORKDIR $NGINX_DIR  # 进入容器中的解压目录</span><br><span class="line"> 编译安装</span><br><span class="line">RUN ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx &amp;&amp; make &amp;&amp; make install</span><br><span class="line"> 回到根目录</span><br><span class="line">WORKDIR /</span><br><span class="line"> 创建程序用户</span><br><span class="line">RUN useradd nginx</span><br><span class="line"> 优化命令环境</span><br><span class="line">RUN ln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx</span><br><span class="line"> 监听端口<span class="number">80</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"> 后台启动nginx服务</span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br></pre></td></tr></table></figure><p>使用Dockerfile构建镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker build -t chai/centos-nginx-start /root/</span><br><span class="line">Successfully built c7efa3d71211</span><br><span class="line">Successfully tagged chai/centos-nginx-start:latest</span><br></pre></td></tr></table></figure><p>使用构建完成的镜像实例化一个容器，验证80端口是否启用</p><p>因为我们最后使用CMD去启动nginx，所以docker run后直接加/bin/bash会替代nginx启动的执行。所以使用以下方法进入容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -itd --name nginxtest chai/centos-nginx-start</span><br><span class="line">da7fe6d1541751dd86078848bf46c532cca9efb40832271bbf02c0eb7a25a1f8</span><br><span class="line">[root@localhost ~]# docker exec -it nginxtest /bin/bash</span><br><span class="line">[root@da7fe6d15417 /]# netstat -anpt | grep 80</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">1</span>/nginx: master pro</span><br></pre></td></tr></table></figure><p>查看ip并访问页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ip为172.17.0.3</span><br><span class="line">[root@localhost ~]# curl -I 172.17.0.3</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.11</span>.<span class="number">1</span></span><br><span class="line">Date: Fri, <span class="number">27</span> Mar <span class="number">2020</span> <span class="number">07</span>:<span class="number">08</span>:<span class="number">49</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">612</span></span><br><span class="line">Last-Modified: Fri, <span class="number">27</span> Mar <span class="number">2020</span> <span class="number">06</span>:<span class="number">58</span>:<span class="number">35</span> GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;5e7da41b-264&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Dockerfile构建nginx镜像&quot;&gt;&lt;a href=&quot;#Dockerfile构建nginx镜像&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile构建nginx镜像&quot;&gt;&lt;/a&gt;Dockerfile构建nginx镜像&lt;/h5&gt;&lt;bloc</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile文件语法</title>
    <link href="http://example.com/2020/09/27/Dockerfile%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2020/09/27/Dockerfile%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-27T06:20:00.000Z</published>
    <updated>2020-09-27T06:43:54.931Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Dockerfile文件编写格式："><a href="#Dockerfile文件编写格式：" class="headerlink" title="Dockerfile文件编写格式："></a>Dockerfile文件编写格式：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM  # 指定base镜像</span><br><span class="line">MAINTAINER # 指定镜像作者，后面根任意字符串</span><br><span class="line">COPY # 把文件从host复制到镜像内</span><br><span class="line">  COPY src dest</span><br><span class="line">  COPY [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;dest&quot;</span>]</span><br><span class="line">  src:只能是文件</span><br><span class="line">ADD # 用法和COPY一样，唯一不同时src可以是压缩包，表示解压缩到dest位置，src也可以是目录</span><br><span class="line">ENV # 设置环境变量可以被接下来的镜像层引用，并且会加入到镜像中</span><br><span class="line">  ENV MY_VERSION <span class="number">1.3</span></span><br><span class="line">  RUN yum -y install http-$MY_VERSION</span><br><span class="line">  # 当进入该镜像的容器中echo $MY_VERSION会输出1.3</span><br><span class="line">EXPOSE # 指定容器中的进程监听的端口（接口），会在docker ps -a中的ports中显示</span><br><span class="line">  EXPOSE <span class="number">80</span></span><br><span class="line">VOLUME # 容器卷，后面会讲到，把host的路径mount到容器中</span><br><span class="line">  VOLUME /root/htdocs /usr/local/apahce2/htdocs</span><br><span class="line">WORKDIR # 为后续的镜像层设置工作路径</span><br><span class="line">        # 如果不设置，Dockerfile文件中的每一条命令都会返回到初始状态</span><br><span class="line">        # 设置一次后，会一直在该路经执行之后的分层，需要WORKDIR /回到根目录</span><br><span class="line">CMD # 启动容器后默认运行的命令，使用构建完成的镜像实例化为容器时，进入后默认执行的命令</span><br><span class="line">    # 这个命令会被docker run启动命令替代</span><br><span class="line">    # 如：docker -it --rm centos echo &quot;hello&quot;</span><br><span class="line">    # echo &quot;hello&quot;会替代CMD运行的命令</span><br><span class="line">  CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off&quot;]  # 该镜像实例化后的容器，进入后运行nginx启动服务</span><br><span class="line">ENTRYPOINT # 容器启动时运行的命令，不会被docker run的启动命令替代</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-80.png" alt="upload successful"></p><p><strong>镜像的命名规则：</strong></p><p>image name = 镜像站地址+作者命名+服务名称:标签</p><h5 id="Dockerfile文件排错方法"><a href="#Dockerfile文件排错方法" class="headerlink" title="Dockerfile文件排错方法"></a>Dockerfile文件排错方法</h5><p>当个构建镜像时Dockerfile中报错，先来制作一个错误的Dockerfile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim Dockerfile</span><br><span class="line">FROM busybox</span><br><span class="line">RUN touch tmpfile</span><br><span class="line">RUN /bin/bash -c echo <span class="string">&quot;continue to build...&quot;</span></span><br><span class="line">COPY testfile /</span><br></pre></td></tr></table></figure><p>使用这个Dockerfile去构建镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker build -t testerror /root</span><br><span class="line">Sending build context to Docker daemon  <span class="number">4.336</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">4</span> : FROM busybox</span><br><span class="line"> ---&gt; <span class="number">83</span>aa35aa1c79</span><br><span class="line">Step <span class="number">2</span>/<span class="number">4</span> : RUN touch tmpfile</span><br><span class="line"> ---&gt; Running in <span class="number">41</span>a8dad29cd6</span><br><span class="line">Removing intermediate container <span class="number">41</span>a8dad29cd6</span><br><span class="line"> ---&gt; <span class="number">8</span>cd5c9a720bb</span><br><span class="line">Step <span class="number">3</span>/<span class="number">4</span> : RUN /bin/bash -c echo <span class="string">&quot;continue to build...&quot;</span></span><br><span class="line"> ---&gt; Running in bc1849fa8144</span><br><span class="line">/bin/sh: /bin/bash: not found</span><br><span class="line">The command <span class="string">&#x27;/bin/sh -c /bin/bash -c echo &quot;continue to build...&quot;&#x27;</span> returned a non-zero code: <span class="number">127</span></span><br></pre></td></tr></table></figure><p>发现构建镜像过程中出现了报错<code>/bin/sh: /bin/bash: not found</code></p><p>可以看到报错信息是从第三步才开始的，说明前两步是没有问题的，可以通过进入前两步最后结束的镜像id中去查看错误，进入前两层的镜像id是一个正常的容器环境，将第三步无法执行的命令，在容器中运行，将会看到真正的错误是没有<code>/bin/bash</code>这个环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it  8cd5c9a720bb</span><br><span class="line">/ # /bin/bash -c echo &quot;continue to build...&quot;</span><br><span class="line">sh: /bin/bash: not found</span><br></pre></td></tr></table></figure><p>因为构建这个镜像使用的是busybox，它使用的环境是<code>/bin/sh</code></p><p>修改后，重新构建成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker build -t testerror /root</span><br><span class="line">Successfully built ae5870fff063</span><br><span class="line">Successfully tagged testerror:latest</span><br></pre></td></tr></table></figure><p>运行容器后，可以看到创建的tmpfile和复制testfile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it testerror </span><br><span class="line">/ # ls</span><br><span class="line">bin       etc       proc      sys       tmp       usr</span><br><span class="line">dev       home      root      testfile  tmpfile   <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h5 id="镜像构建过程"><a href="#镜像构建过程" class="headerlink" title="镜像构建过程"></a>镜像构建过程</h5><p>在构建命令执行时输出的一大堆信息中，是执行Dockerfile中的每一行，最关键的几行信息如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Step 1/5 : FROM centos  # 调用centos</span><br><span class="line"> 5e35e350aded   # centos镜像id</span><br><span class="line">  </span><br><span class="line">Step <span class="number">2</span>/<span class="number">5</span> : RUN yum install httpd -y</span><br><span class="line"> Running in a16ddf07c140  # 运行一个临时容器来执行install httpd</span><br><span class="line">Removing intermediate container a16ddf07c140  # 完成后删除临时的容器id</span><br><span class="line"> b51207823459  # 生成一个镜像</span><br><span class="line">  </span><br><span class="line">Step <span class="number">3</span>/<span class="number">5</span> : RUN yum install net-tools -y</span><br><span class="line"> Running in 459c8823018a # 运行一个临时容器执行install net-tools</span><br><span class="line">Removing intermediate container 459c8823018a # 完成后删除临时容器id</span><br><span class="line"> 5b6c30a532d4  # 再生成一个镜像</span><br><span class="line"> </span><br><span class="line">Step <span class="number">4</span>/<span class="number">5</span> : RUN yum install elinks -y</span><br><span class="line"> Running in a2cb490f9b2f  # 运行一个临时容器执行install elinks</span><br><span class="line">Removing intermediate container a2cb490f9b2f # 完成后删除临时容器id</span><br><span class="line"> 24ba4735814b # 生成一个镜像</span><br><span class="line"> </span><br><span class="line">Step <span class="number">5</span>/<span class="number">5</span> : CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br><span class="line"> Running in 792333c88ba8  # 运行临时容器，执行/bin/bash</span><br><span class="line">Removing intermediate container 792333c88ba8  # 完成后删除临时容器id</span><br><span class="line"> 09266c896243  # 生成镜像</span><br><span class="line">Successfully built 09266c896243  # 最终成功后的镜像id就是最后生成的镜像id</span><br></pre></td></tr></table></figure><p>每一步生成一个镜像，都属于一个<code>docker commit</code>的执行结果</p><p>在这个过程中一共生成了三个镜像层，都会被存储在graph中，包括层与层之间的关系，查看docker images中生成的镜像id是否为最后生成的镜像id，<code>FROM</code>和<code>CMD</code>都不算做镜像层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">chai/centos-http-net   latest    <span class="number">09266</span>c896243   <span class="number">10</span> seconds ago   <span class="number">581</span>MB</span><br></pre></td></tr></table></figure><p>通过<code>docker history</code>也可以看到简单的构建过程，这几个过程的size容量加起来也就是最终生成镜像的大小，也可将这里的镜像id和上面过程中的id进行对比，我们所看到的是三个yum就是形成的三个镜像层</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker history chai/centos-http-net:latest </span><br><span class="line">IMAGE         CREATED          CREATED BY                                      SIZE    COMMENT</span><br><span class="line">09266c896243  17 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line"><span class="number">24</span>ba4735814b  <span class="number">17</span> minutes ago   /bin/sh -c yum install elinks -y                <span class="number">121</span>MB               </span><br><span class="line"><span class="number">5</span>b6c30a532d4  <span class="number">18</span> minutes ago   /bin/sh -c yum install net-tools -y             <span class="number">112</span>MB               </span><br><span class="line">b51207823459  <span class="number">18</span> minutes ago   /bin/sh -c yum install httpd -y                 <span class="number">145</span>MB               </span><br><span class="line">5e35e350aded  4 months ago     /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;     4 months ago     /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;     4 months ago     /bin/sh -c #(nop) ADD file:45a381049c52b5664…   203MB</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-81.png" alt="upload successful"></p><p><img src="/images/pasted-82.png" alt="upload successful"></p><p><img src="/images/pasted-83.png" alt="upload successful"></p><p><img src="/images/pasted-84.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Dockerfile文件编写格式：&quot;&gt;&lt;a href=&quot;#Dockerfile文件编写格式：&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile文件编写格式：&quot;&gt;&lt;/a&gt;Dockerfile文件编写格式：&lt;/h5&gt;&lt;figure class</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux权限管理之ACL权限</title>
    <link href="http://example.com/2020/09/24/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8BACL%E6%9D%83%E9%99%90/"/>
    <id>http://example.com/2020/09/24/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8BACL%E6%9D%83%E9%99%90/</id>
    <published>2020-09-24T03:22:22.000Z</published>
    <updated>2020-09-24T03:26:44.838Z</updated>
    
    <content type="html"><![CDATA[<h5 id="ACL权限设置规则："><a href="#ACL权限设置规则：" class="headerlink" title="ACL权限设置规则："></a>ACL权限设置规则：</h5><blockquote><p>可以给任何的用户或用户组设置任何文件/目录的访问权限。</p></blockquote><h6 id="添加ACL规则的命令格式："><a href="#添加ACL规则的命令格式：" class="headerlink" title="添加ACL规则的命令格式："></a>添加ACL规则的命令格式：</h6><p>　　①、给用户设定 ACL 权限：setfacl -m u:用户名:权限 指定文件名</p><p>　　②、给用户组设定 ACL 权限:setfacl -m g:组名:权限 指定文件名</p><h6 id="选项："><a href="#选项：" class="headerlink" title="选项："></a>选项：</h6><pre><code>-m：设定ACL权限        例：setfacl -m [g/u]:[组名/用户名]:rwx 指定的目录/文件-x：删除指定的ACL权限        例：setfacl -x [g/u]:[组名/用户名] 指定的目录/文件-b：删除所有的ACL权限        例：setfacl -b 指定的目录/文件</code></pre><h5 id="拿用户组来举例（当然拿某个用户也是一样的）"><a href="#拿用户组来举例（当然拿某个用户也是一样的）" class="headerlink" title="拿用户组来举例（当然拿某个用户也是一样的）"></a>拿用户组来举例（当然拿某个用户也是一样的）</h5><p>创建一个目录：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 /]# mkdir /pro</span><br></pre></td></tr></table></figure><p>创建两个用户：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 /]# useradd zs</span><br><span class="line">[root@node1 /]# useradd ls</span><br></pre></td></tr></table></figure><p>切换zs用户或者ls用户去/pro目录中进行操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# su zs</span><br><span class="line">[zs<span class="meta">@node1</span> root]$ cd /pro</span><br><span class="line">[zs<span class="meta">@node1</span> pro]$ touch file</span><br><span class="line">touch: 无法创建<span class="string">&quot;file&quot;</span>: 权限不够</span><br><span class="line">[root@node1 ~]# su ls</span><br><span class="line">[ls<span class="meta">@node1</span> root]$ cd /pro</span><br><span class="line">[ls<span class="meta">@node1</span> pro]$ touch file</span><br><span class="line">touch: 无法创建<span class="string">&quot;file&quot;</span>: 权限不够</span><br><span class="line"></span><br><span class="line"># 注意：这时通过zs用户去/pro目录下去操作，是无法进行操作的，该用户对此目录没有操作权限，当然ls用户也是一样。</span><br></pre></td></tr></table></figure><p>创建一个用户组：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# groupadd userzu</span><br></pre></td></tr></table></figure><p>将zs用户以及ls用户加入到userzu中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# usermod -G userzu zs</span><br><span class="line">[root@node1 ~]# usermod -G userzu ls</span><br><span class="line">[root@node1 ~]# groups zs</span><br><span class="line">zs : zs userzu</span><br><span class="line">[root@node1 ~]# groups ls</span><br><span class="line">ls : ls userzu# 将用户已经加入到组内</span><br></pre></td></tr></table></figure><p>当然之加入到组中也是没有权限的，需要通过acl对此目录绑定权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# setfacl -m g:userzu:rwx /pro</span><br><span class="line">[root@node1 ~]# chmod 775 /pro# 允许用户组有读写执行权限</span><br><span class="line">[root@node1 ~]# getfacl /pro</span><br><span class="line">getfacl: Removing leading <span class="string">&#x27;/&#x27;</span> from absolute path names</span><br><span class="line"># file: pro</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rwx</span><br><span class="line">group::rwx</span><br><span class="line">group:userzu:rwx# 这里已经显示由哪个组可以对该目录进行操作，并拥有什么样的权限（可以绑定多个用户组）</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure><p>再次切换zs用户去/pro目录进行操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[zs<span class="meta">@node1</span> pro]$ touch &#123;<span class="number">1.</span>.<span class="number">3</span>&#125;</span><br><span class="line">[zs<span class="meta">@node1</span> pro]$ ls</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">[zs<span class="meta">@node1</span> pro]$ ll</span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">-rw-rw-r--. <span class="number">1</span> zs zs <span class="number">0</span> <span class="number">9</span>月  <span class="number">12</span> <span class="number">17</span>:<span class="number">34</span> <span class="number">1</span></span><br><span class="line">-rw-rw-r--. <span class="number">1</span> zs zs <span class="number">0</span> <span class="number">9</span>月  <span class="number">12</span> <span class="number">17</span>:<span class="number">34</span> <span class="number">2</span></span><br><span class="line">-rw-rw-r--. <span class="number">1</span> zs zs <span class="number">0</span> <span class="number">9</span>月  <span class="number">12</span> <span class="number">17</span>:<span class="number">34</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"># 可以成功的进行操作！！！（ls用户也是一样）</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;ACL权限设置规则：&quot;&gt;&lt;a href=&quot;#ACL权限设置规则：&quot; class=&quot;headerlink&quot; title=&quot;ACL权限设置规则：&quot;&gt;&lt;/a&gt;ACL权限设置规则：&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;可以给任何的用户或用户组设置任何文件/目录的访问权</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 双网卡绑定</title>
    <link href="http://example.com/2020/09/22/Linux-%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A/"/>
    <id>http://example.com/2020/09/22/Linux-%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A/</id>
    <published>2020-09-22T09:25:00.000Z</published>
    <updated>2020-09-22T09:33:45.616Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux-双网卡绑定"><a href="#Linux-双网卡绑定" class="headerlink" title="Linux 双网卡绑定"></a>Linux 双网卡绑定</h4><blockquote><p>双网卡绑定这项继续特别适合利用再生产环境7x24小时的网络传输服务，采取双网卡绑定模式不仅可以提高网络传输速度，更重要的是，还可以确保其中一块网卡出现故障时，依然可以正常高效可靠的措施。下面我会使用两种方案来完成网双卡绑定 一种是传统的配置文件修改方案，另一种是最新的命令生成配置文件方案。</p></blockquote><h5 id="主要常用的三种模式"><a href="#主要常用的三种模式" class="headerlink" title="主要常用的三种模式"></a>主要常用的三种模式</h5><ul><li>mode0（平衡负载模式）：平时两块网卡均工作，且自动备援，但需要在与服务器本地网卡相连的交换机设备上进行端口聚合来支持绑定技术。</li><li>mode1（自动备援模式）：平时只有一块网卡工作，在它故障后自动替换为另外的网卡。</li><li>mode6（平衡负载模式）：平时两块网卡均工作，且自动备援，无须交换机设备提供辅助支持。(推荐)</li></ul><h5 id="其他模式介绍"><a href="#其他模式介绍" class="headerlink" title="其他模式介绍"></a>其他模式介绍</h5><ul><li>balance-rr (mode=0)       默认, 有高可用 (容错) 和负载均衡的功能,  需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡).</li><li>active-backup (mode=1)  只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。缺点是端口利用率比较低</li><li>balance-xor (mode=2)     不常用</li><li>broadcast (mode=3)        不常用</li><li>802.3ad (mode=4)          IEEE 802.3ad 动态链路聚合，需要交换机配置，没用过</li><li>balance-tlb (mode=5)      不常用</li><li>balance-alb (mode=6)     有高可用 ( 容错 )和负载均衡的功能，不需要交换机配置  (流量分发到每个接口不是特别均衡)</li></ul><h5 id="修改配置文件实现双网卡绑定"><a href="#修改配置文件实现双网卡绑定" class="headerlink" title="修改配置文件实现双网卡绑定"></a>修改配置文件实现双网卡绑定</h5><p>注意：</p><ul><li>必须保证服务器有两块同网段网卡设备</li></ul><p>环境：</p><ul><li>已添加 网卡1 ens33</li><li>已添加 网卡2 ens34</li></ul><h6 id="新建Master配置文件"><a href="#新建Master配置文件" class="headerlink" title="新建Master配置文件"></a>新建Master配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-bond6</span><br><span class="line"># 设备名</span><br><span class="line">DEVICE=bond6</span><br><span class="line"># 手动配置地址</span><br><span class="line">BOOTPROTO=none</span><br><span class="line"># 配置模式</span><br><span class="line">BONDING_OPTS=<span class="string">&quot;miimon=100 mode=6&quot;</span></span><br><span class="line"># IP地址</span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line"># 子网掩码</span><br><span class="line">PREFIX=<span class="number">24</span></span><br><span class="line"># 网关地址</span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"># DNS1地址</span><br><span class="line">DNS1=<span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"># DNS2地址</span><br><span class="line">DNS2=<span class="number">8.8</span>.<span class="number">8.8</span></span><br></pre></td></tr></table></figure><h6 id="新建Slave1配置文件"><a href="#新建Slave1配置文件" class="headerlink" title="新建Slave1配置文件"></a>新建Slave1配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"># 设备名</span><br><span class="line">DEVICE=ens33</span><br><span class="line"># 手动获取    </span><br><span class="line">BOOTPROTO=none</span><br><span class="line"># master设备名</span><br><span class="line">MASTER=bond0</span><br><span class="line"># 开启SLAVE</span><br><span class="line">SLAVE=yes</span><br><span class="line">#是否允许普通用户管理此端口</span><br><span class="line">USERCTL=no </span><br></pre></td></tr></table></figure><h6 id="新建Slave2配置文件"><a href="#新建Slave2配置文件" class="headerlink" title="新建Slave2配置文件"></a>新建Slave2配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens34</span><br><span class="line"># 设备名</span><br><span class="line">DEVICE=ens34</span><br><span class="line"># 手动获取</span><br><span class="line">BOOTPROTO=none</span><br><span class="line"># master设备名</span><br><span class="line">MASTER=bond0</span><br><span class="line"># 开启SLAVE</span><br><span class="line">SLAVE=yes</span><br><span class="line">#是否允许普通用户管理此端口</span><br><span class="line">USERCTL=no  </span><br></pre></td></tr></table></figure><h5 id="nmcli命令行实现双网卡绑定"><a href="#nmcli命令行实现双网卡绑定" class="headerlink" title="nmcli命令行实现双网卡绑定"></a>nmcli命令行实现双网卡绑定</h5><h6 id="创建Master配置文件"><a href="#创建Master配置文件" class="headerlink" title="创建Master配置文件"></a>创建Master配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nmcli connection add type bond con-name 设备名称 ifname 设备名称 mode 模式号 miimon 毫秒</span><br><span class="line">nmcli connection add type bond con-name bond6 ifname bond6 mode <span class="number">1</span> miimon <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>注：miimon：指定当发现一个链路恢复时，在激活该链路之前的等待时间，以毫秒计算</p></blockquote><h6 id="新建Slave1配置文件-1"><a href="#新建Slave1配置文件-1" class="headerlink" title="新建Slave1配置文件"></a>新建Slave1配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nmcli connection add type bond-slave ifname 设备名称 master master设备名称</span><br><span class="line">nmcli connection add type bond-slave ifname ens33 master bond6</span><br></pre></td></tr></table></figure><h6 id="新建Slave2配置文件-1"><a href="#新建Slave2配置文件-1" class="headerlink" title="新建Slave2配置文件"></a>新建Slave2配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nmcli connection add type bond-slave ifname 设备名称 master master设备名称</span><br><span class="line">nmcli connection add type bond-slave ifname ens34 master bond6</span><br></pre></td></tr></table></figure><h6 id="激活网路设备"><a href="#激活网路设备" class="headerlink" title="激活网路设备"></a>激活网路设备</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 激活bond6网络设备</span><br><span class="line">nmcli connection up <span class="string">&quot;bond6&quot;</span></span><br><span class="line"># 激活ens33网络设备</span><br><span class="line">nmcli connection up <span class="string">&quot;bond-slave-ens33&quot;</span></span><br><span class="line"># 激活ens34网络设备</span><br><span class="line">nmcli connection up <span class="string">&quot;bond-slave-ens34&quot;</span></span><br></pre></td></tr></table></figure><h6 id="查看详情信息"><a href="#查看详情信息" class="headerlink" title="查看详情信息"></a>查看详情信息</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/net/bonding/bond6 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Linux-双网卡绑定&quot;&gt;&lt;a href=&quot;#Linux-双网卡绑定&quot; class=&quot;headerlink&quot; title=&quot;Linux 双网卡绑定&quot;&gt;&lt;/a&gt;Linux 双网卡绑定&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;双网卡绑定这项继续特别适合利用再生产环境7</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat</title>
    <link href="http://example.com/2020/09/18/Tomcat/"/>
    <id>http://example.com/2020/09/18/Tomcat/</id>
    <published>2020-09-18T11:02:00.000Z</published>
    <updated>2020-09-25T02:52:13.964Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Tomcat-是什么"><a href="#Tomcat-是什么" class="headerlink" title="Tomcat 是什么?"></a>Tomcat 是什么?</h5><p>Tomcat 由JAVA语言开发的Java容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，Tomcat是一种类似于IIS、Apache Http的Web服务端程序， Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。也就是Web容器。</p><p>Servlet：是应用在服务端的小程序，由JAVA语言编写，本身支持各种JAVA相关的请求，但是大多用于接收web服务发来的请求，与数据库交互并将响应交给web服务</p><p>JDK：JAVA开发工具包。</p><p>常用工具：</p><blockquote><p>Java：运行编译后的类文件</p></blockquote><blockquote><p>Jar：对类文件进行打包</p></blockquote><blockquote><p>Javac：对源文件中的注释提取文档</p></blockquote><blockquote><p>Jconsole：远程连接工具</p></blockquote><blockquote><p>Jre：JAVA运行环境</p></blockquote><h5 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h5><p>配置Java环境</p><p>解压软件包</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">zxf</span> <span class="selector-tag">jdk-8u201-linux-x64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>将jdk解压后的目录移动到/usr/local/起名为java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mv <span class="regexp">/root/</span>jdk1.<span class="number">8.0</span>_201<span class="regexp">/ /u</span>sr<span class="regexp">/local/</span>java</span><br></pre></td></tr></table></figure><p>删除原先的旧java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rm -rf <span class="regexp">/usr/</span>bin/java</span><br></pre></td></tr></table></figure><p>配置Java环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo &#x27;export JAVA_HOME=/usr/local/java</span></span><br><span class="line"><span class="comment"># 设置jre（Jave Runtime Environment：java运行时环境）的安装目录变量</span></span><br><span class="line">&gt; <span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=/usr/local/java/jre/</span><br><span class="line"><span class="comment"># 设置类文件路径，冒号代表加的意思，引用以上设置的变量</span></span><br><span class="line">&gt; <span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/lib:$JRE_HOME/lib</span><br><span class="line"><span class="comment"># 最后一行，相当于windows系统的命令环境变量，就是新添了两个java以及jre的命令变量</span></span><br><span class="line"><span class="comment"># $PATH代表原有的环境变量，使用变量复用</span></span><br><span class="line">&gt; <span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin:$JRE_HOME/bin&#x27; &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><p>加载编写的profile文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p>查看版本号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_201&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.201-b09, mixed mode)</span><br></pre></td></tr></table></figure><p>安装Tomcat</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> zxf apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">35</span>.tar.gz </span><br><span class="line"><span class="attribute">mv</span> apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">35</span> /usr/local/tomcat</span><br></pre></td></tr></table></figure><p>启动服务：<code>/usr/local/tomcat/bin/startup.sh</code></p><p>停止服务：<code>/usr/local/tomcat/bin/shutdown.sh</code></p><blockquote><p>8080：接收客户端请求</p></blockquote><blockquote><p>8005：用于接收shutdown指令</p></blockquote><blockquote><p>8009：用于tomcat接受其他web服务发来的请求</p></blockquote><p>server.xml主配置文件</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/tomcat/conf/server.xml</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span></span><br><span class="line">port：server模块监听的端口号，可以自定义，只有端口号不冲突，为-<span class="number">1</span>时表示不接受关闭指令</span><br><span class="line">shutdown：server模块接收到的参数指定的指令时就关闭tomcat程序</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span></span><br><span class="line">name：指定该servie的名字，可以有多个service通过名字来区分</span><br><span class="line"></span><br><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">           connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">           redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;&lt;/Connector&gt;</span><br><span class="line">&lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">port：tomcat对客户端开放的端口号，<span class="number">8080</span>是用于接收客户端发送的http请求，<span class="number">8009</span>是用于tomcat接受其他web服务发来的请求</span><br><span class="line">protocol：客户端连接tomcat使用的协议，AJP协议用于tomcat与其他web服务建立连接使用的</span><br><span class="line">connectionTimeout：与tomcat的连接超时时间，单位毫秒</span><br><span class="line">redirectPort：当tomcat配置为https时，如果客户端仍然使用http协议访问，强制对客户端使用的协议转换为https，并将端口转换为<span class="number">8443</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span></span><br><span class="line">name：该engine的名字，如果有多个service用来区分不同的引擎，并在日志中通过 名字进行标识</span><br><span class="line"><span class="keyword">default</span> Host：引擎接受请求通过客户端请求的URL的IP/域名/主机名部分匹配Host模块，如果没有匹配到的则把请求交给defaultHost指定的主机处理，所以必须要有一个Host模块的主机名为defaultHost指定的名字</span><br><span class="line"></span><br><span class="line">&lt;Host<span class="built_in"> name</span>=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span></span><br><span class="line">          unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">&lt;Context<span class="built_in"> path</span>=”/test” docBase=”/haha”&gt;&lt;/Context&gt;</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">name：该host也就是虚拟主机对应的名字，用来engine对客户端访问的url中的主机部分进行匹配</span><br><span class="line">appBase：该虚拟主机对应的站点目录，webapps是一个相对路径，其绝对路径为“/usr/local/tomcat/webapps”</span><br><span class="line">path：客户端访问的URL指定的名字如果是/test那么客户端要找的数据对应的位置就在/haha目录下</span><br><span class="line">docBase：web应用存放位置</span><br><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> directory=<span class="string">&quot;logs&quot;</span></span><br><span class="line">               prefix=<span class="string">&quot;localhost_access_log&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span></span><br><span class="line">               pattern=<span class="string">&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</span> /&gt;</span><br><span class="line">Directory：指定访问日志存放的位置，logs是相对路径，绝对路径为“/usr/local/tomcat/logs”</span><br><span class="line">Prefix：指定访问日志文件的前缀</span><br><span class="line">Suffix：指定访问日志文件的后缀</span><br><span class="line">Pattern：指定日志文件的格式</span><br><span class="line">- <span class="meta">%h</span>：记录发送该请求的主机的IP地址，可能是客户端的IP，可能是代理服务器的IP（谁最终将请求交给tomcat，这里就是谁的IP）</span><br><span class="line">- <span class="meta">%l</span>：记录该请求使用的逻辑用户，如果没有就用-表示</span><br><span class="line">- <span class="meta">%u</span>：记录该请求的真实用户，如果没有则用-表示</span><br><span class="line">- <span class="meta">%t</span>：记录该请求的发送时间</span><br><span class="line">- <span class="meta">%quot</span>；：表示“”引号</span><br><span class="line">- <span class="meta">%r</span>：记录请求的请求行</span><br><span class="line">- <span class="meta">%s</span>：记录对该请求响应的状态码</span><br><span class="line">- <span class="meta">%b</span>：记录该请求相应的字节数</span><br><span class="line">- <span class="meta">%D</span>：记录该请求响应的时间，可以用来测试tomcat的性能</span><br></pre></td></tr></table></figure><h5 id="Tomcat多实例"><a href="#Tomcat多实例" class="headerlink" title="Tomcat多实例"></a>Tomcat多实例</h5><blockquote><p>通过修改不同tomcat结点的配置文件中的端口来启动不同的tomcat实例</p></blockquote><p>示例一：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> zxf apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">33</span>.tar.gz</span><br><span class="line"><span class="attribute">cp</span> /root/apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">33</span> /usr/local/tomcat</span><br><span class="line"><span class="attribute">sh</span> /usr/local/tomcat/bin/startup.sh//启动第一个实例</span><br><span class="line"><span class="attribute">netstat</span> -anpt | grep java//查看到监听了三个端口<span class="number">8080</span>、<span class="number">8005</span>、<span class="number">8009</span></span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/root/</span>apache-tomcat<span class="number">-8.5</span><span class="number">.33</span> <span class="regexp">/usr/</span>local/tomcat2</span><br><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/tomcat2/</span>conf/server.xml</span><br><span class="line">修改：</span><br><span class="line">&lt;Server port=<span class="string">&quot;8006&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;<span class="comment">//修改接收shutdown指令的端口</span></span><br><span class="line">&lt;Connector port=<span class="string">&quot;8081&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span><span class="comment">//修改接收客户端请求的端口</span></span><br><span class="line">&lt;Connector port=<span class="string">&quot;8010&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> <span class="regexp">/&gt;/</span>/修改接收其他web服务发送请求的端口</span><br><span class="line">sh <span class="regexp">/usr/</span>local<span class="regexp">/tomcat2/</span>bin<span class="regexp">/startup.sh/</span>/启动第二个实例</span><br><span class="line">netstat -anpt | grep java<span class="comment">//可以看到实例二所监听的端口8081、8006、8010</span></span><br></pre></td></tr></table></figure><h6 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h6><p>通过访问这两个tomcat节点，可以在这两个节点的站点目录下添加不同的文件来访问</p><p>添加示例一测试文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps/<span class="number">1</span></span><br><span class="line">echo wo shi shi li yi &gt; <span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps<span class="regexp">/1/</span><span class="number">1</span>.jsp</span><br></pre></td></tr></table></figure><p>添加示例二测试文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/tomcat2/</span>webapps/<span class="number">2</span></span><br><span class="line">echo wo shi shi li er &gt; <span class="regexp">/usr/</span>local<span class="regexp">/tomcat2/</span>webapps<span class="regexp">/2/</span><span class="number">2</span>.jsp</span><br></pre></td></tr></table></figure><p>访问：<br><img src="/images/timg2.png" alt="upload successful"></p><h5 id="Tomcat多虚拟主机"><a href="#Tomcat多虚拟主机" class="headerlink" title="Tomcat多虚拟主机"></a>Tomcat多虚拟主机</h5><p>在hosts文件中添加域名</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-41.png" alt="upload successful"></p><p>再一个tomcat实例中添加多个Host模块，匹配多个站点目录供客户端访问</p><p>修改server.xml主配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/conf/server.xml</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-42.png" alt="upload successful"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;www.one.com&quot; appBase=&quot;/one&quot;&gt;&lt;/Host&gt;//客户端如果访问的url域名为www.one.com，则匹配的站点目录为/one</span><br><span class="line">        &lt;Host name=<span class="string">&quot;www.two.com&quot;</span> appBase=<span class="string">&quot;/two&quot;</span>&gt;<span class="comment">//客户端如果访问的url域名为www.two.com，则匹配的站点目录为/two</span></span><br><span class="line">        &lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>创建站点目录/one和/two，并添加web应用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /one/o</span><br><span class="line"># echo one &gt; /one/o/aa.jsp</span><br><span class="line"># mkdir -p /two/t</span><br><span class="line"># echo two &gt; /two/t/bb.jsp</span><br></pre></td></tr></table></figure><p>在默认的webapps站点目录下创建目录cc，并添加web应用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /usr/local/tomcat/webapps/three</span><br><span class="line"># echo nin ben ci fang wen de ye mian lai zi zhan dian mu lu wei webapps xia &gt; /usr/local/tomcat/webapps/three/cc.jsp</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># curl www.one.com:8080/o/aa.jsp</span><br><span class="line">one</span><br><span class="line"># curl www.two.com:8080/t/bb.jsp</span><br><span class="line">two</span><br></pre></td></tr></table></figure><p>访问<a href="http://www.three.com:8080/three/cc.jsp%60%EF%BC%88%E6%9C%AC%E6%AC%A1%E8%AE%BF%E9%97%AE%E7%9A%84url%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%8C%87%E5%AE%9A%E5%9F%9F%E5%90%8D%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E7%AB%99%E7%82%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%89%80%E4%BB%A5%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%9F%9F%E5%90%8D%E7%9A%84%E5%86%85%E5%AE%B9%E6%9D%A5%E8%87%AAtomcat%E9%BB%98%E8%AE%A4%E7%9A%84%E7%AB%99%E7%82%B9%E7%9B%AE%E5%BD%95webapps%E4%B8%8B%E7%9A%84three%E7%9A%84web%E5%BA%94%E7%94%A8%EF%BC%89%60">www.three.com:8080/three/cc.jsp`（本次访问的url在配置文件中没有指定域名所对应的站点目录，所以访问该域名的内容来自tomcat默认的站点目录webapps下的three的web应用）`</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl www.three.com:8080/three/cc.jsp</span><br><span class="line">nin ben ci fang wen de ye mian lai zi zhan dian mu lu wei webapps xia</span><br></pre></td></tr></table></figure><h5 id="自定义web应用的访问位置"><a href="#自定义web应用的访问位置" class="headerlink" title="自定义web应用的访问位置"></a>自定义web应用的访问位置</h5><p>修改配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/conf/server.xml</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-44.png" alt="upload successful"></p><blockquote><p>如果客户端访问的url中域名为<a href="http://www.two.com则匹配到的站点目录为/two">www.two.com则匹配到的站点目录为/two</a><br>如果客户端访问的url中域名为<a href="http://www.two.com:8080/myself%EF%BC%8C%E5%88%99%E5%8C%B9%E9%85%8D%E7%9A%84%E7%AB%99%E7%82%B9%E7%9B%AE%E5%BD%95%E4%B8%BA/self">www.two.com:8080/myself，则匹配的站点目录为/self</a></p></blockquote><p>重启服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建/self站点目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /self</span><br><span class="line"># echo this is myself &gt; /self/self.jsp</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># curl www.two.com:8080/t/bb.jsp</span><br><span class="line">two</span><br><span class="line"># curl www.two.com:8080/myself/self.jsp</span><br><span class="line">myself</span><br></pre></td></tr></table></figure><h5 id="编写内存测试页面"><a href="#编写内存测试页面" class="headerlink" title="编写内存测试页面"></a>编写内存测试页面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir /one/memtest</span><br><span class="line">vim /one/memtest/meminfo.jsp</span><br><span class="line">&lt;%</span><br><span class="line">Runtime rtm = Runtime.getRuntime();# 获取运行时间</span><br><span class="line">long mm = rtm.maxMemory()/1024/1024;# 给JVM分配的最大内存</span><br><span class="line">long tm = rtm.totalMemory()/1024/1024;# Java程序用掉的JVM内存</span><br><span class="line">long fm = rtm.freeMemory()/1024/1024;# 给JVM分配完后剩余的内存</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">&quot;memory info:&lt;br&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;jvm max memory:&quot;</span>+mm+<span class="string">&quot;MB&quot;</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;jvm used:&quot;</span>+tm+<span class="string">&quot;MB&quot;</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;system free:&quot;</span>+fm+<span class="string">&quot;MB&quot;</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;can be used:&quot;</span>+(mm+fm-tm)+<span class="string">&quot;MB&quot;</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>访问测试：</p><p><img src="/images/pasted-45.png" alt="upload successful"></p><h5 id="远程监控tomcat性能"><a href="#远程监控tomcat性能" class="headerlink" title="远程监控tomcat性能"></a>远程监控tomcat性能</h5><p>编写脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/bin/catalina.sh</span><br><span class="line">添加：（<span class="number">309</span>行）</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=1.1.1.1&quot;# 指定被连接的主机的IP/主机名/域名</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=9000&quot;# 指定被连接的主机的端口</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;# 指定连接时使用的身份验证</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;# 指定连接时使用的身份验证</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-46.png" alt="upload successful"></p><p>设置用于远程连接的用户和密码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cp <span class="regexp">/usr/</span>local<span class="regexp">/java/</span>jre<span class="regexp">/lib/m</span>anagement<span class="regexp">/jmxremote.password.template /u</span>sr<span class="regexp">/local/</span>java<span class="regexp">/jre/</span>lib<span class="regexp">/management/</span>jmxremote.password</span><br><span class="line"># vim  <span class="regexp">/usr/</span>local<span class="regexp">/java/</span>jre<span class="regexp">/lib/m</span>anagement/jmxremote.password</span><br><span class="line">取消注释：</span><br><span class="line"> 用户名  密码</span><br><span class="line">monitorRole<span class="number">123456</span></span><br><span class="line">controlRole<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>对password文件提权</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod 600 /usr/local/java/jre/lib/management/jmxremote.password</span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; /usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-47.png" alt="upload successful"></p><p>放行防火墙（不行就关闭防火墙）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --add-port=8080/tcp</span><br><span class="line"># firewall-cmd --add-port=8005/tcp</span><br><span class="line"># firewall-cmd --add-port=8009/tcp</span><br><span class="line"># firewall-cmd --add-port=9000/tcp</span><br><span class="line"># setenforce 0</span><br></pre></td></tr></table></figure><p>打开一台虚拟机（只需要部署JDK）</p><p>远程连接</p><p>jconsole</p><p><img src="/images/pasted-48.png" alt="upload successful"></p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p><img src="/images/pasted-50.png" alt="upload successful"></p><h5 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h5><p>初次访问一个不存在的错误页面结果</p><p><img src="/images/pasted-51.png" alt="upload successful"><br>修改web页面配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/conf/web.xml</span><br><span class="line">添加：（<span class="number">117</span>行）</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">        &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">        &lt;location&gt;/notfound.jsp&lt;/location&gt;# 指定错误页面的文件</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><p>编写要返回给客户端的错误页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/webapps/ROOT/notfound.jsp</span><br><span class="line">Not Found！</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/tomcat/bin/</span><br><span class="line"># ./shutdown.sh</span><br><span class="line"># ./startup.sh</span><br></pre></td></tr></table></figure><p>如提示报错：（显示地址被占用）</p><p><img src="/images/pasted-53.png" alt="upload successful"></p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>直接杀死相关的进程号就OK！</p><p>kill -9 50831</p><p>再次关闭、启动就OK！</p><p>测试访问：（访问一个不存在的页面）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 127.0.0.1:8080/zx.jsp</span><br><span class="line">Not Found!</span><br></pre></td></tr></table></figure><h5 id="通过web页面来管理虚拟主机"><a href="#通过web页面来管理虚拟主机" class="headerlink" title="通过web页面来管理虚拟主机"></a>通过web页面来管理虚拟主机</h5><p>将打包好的web应用bdqnweb.war拷贝到宿主目录下</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>修改配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">取消注释并设置可访问管理界面的用户（最后）</span><br><span class="line"># vim /usr/local/tomcat/conf/tomcat-users.xml</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;# 设置可以访问host-manager这个web应用的html的权限</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;# 设置可以访问txt类型页面的权限</span><br><span class="line">&lt;user username=&quot;aa&quot; password=&quot;123.com&quot; roles=&quot;admin-gui,admin-script&quot;/&gt;# 添加用户aa密码为123.com，拥有admin-gui和admin-script两个权限</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>验证</p><blockquote><p>访问管理虚拟主机页面并添加虚拟主机</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/host-manager</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-56.png" alt="upload successful"></p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p><img src="/images/pasted-58.png" alt="upload successful"><br>创建<a href="http://www.test.com域名所对应的站点目录,并添加web应用/">www.test.com域名所对应的站点目录，并添加web应用</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /test/app1</span><br><span class="line"># echo www.test.com &gt; /test/app1/test.jsp</span><br></pre></td></tr></table></figure><p>修改hosts文件添加域名</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;1.1.1.1 www.test.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl www.test.com:8080/app1/test.jsp</span><br><span class="line">www.test.com</span><br></pre></td></tr></table></figure><p>设置允许其他地址访问<code>Host-manager管理界面</code>（<code>默认地址为127.0.0.1可访问</code>）</p><blockquote><p><u>如果使用本机的物理IP访问<strong>host-manager</strong>管理界面是不可以访问的因为在配置文件中没有指定其他IP访问管理界面，所以在配置文件中可以指定其他IP允许访问管理界面</u></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/tomcat/webapps/host-manager/META-INF/context.xml</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-59.png" alt="upload successful"></p><blockquote><p>在正则表达式里面“点”为任意所有的意思，所以在这里需要用“\”这个符号进行转义（<code>^.*$代表允许所有地址可访问</code>）</p></blockquote><p>重启服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox <span class="number">1.1</span>.<span class="number">1.1</span>:<span class="number">8080</span>/host-manager</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-60.png" alt="upload successful"></p><p><img src="/images/pasted-61.png" alt="upload successful"><br>访问成功！！！</p><blockquote><p><u>重启服务后在管理界面添加的虚拟主机域名会消失，因为重启后服务会读取配置文件中的数据，在管理界面添加的虚拟主机不记录在配置文件中，所以会消失，但是消失的虚拟主机所对应的数据还在，只是虚拟主机的域名不存在。</u></p></blockquote><blockquote><p>访问manager控制界面（如果虚拟主机和发布web应用一起做的话一起修改tomcat-users配置文件，如果先做虚拟主机在做发布web应用中间在重启服务，虚拟主机就会消失，建议一起修改配置文件）</p></blockquote><p>在配置文件中3yy，p复制粘贴这三行并修改</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/tomcat/conf/tomcat-users.xml</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;# 设置可以访问manager这个web应用的html权限</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;# 设置可以访问txt类型页面的权限</span><br><span class="line">&lt;user username=&quot;bb&quot; password=&quot;123.com&quot; roles=&quot;manager-gui,manager-script&quot;/&gt;# 添加可以访问的用户bb，密码为123.聪明，拥有manager-gui和manager-script两个权限 </span><br></pre></td></tr></table></figure><p><img src="/images/pasted-62.png" alt="upload successful"><br>重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/manager</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-63.png" alt="upload successful"></p><h6 id="第一种发布web应用方式"><a href="#第一种发布web应用方式" class="headerlink" title="第一种发布web应用方式"></a>第一种发布web应用方式</h6><p><img src="/images/pasted-64.png" alt="upload successful"></p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p><img src="/images/pasted-68.png" alt="upload successful"><br><strong>发布成功后顶部显示OK</strong></p><p><img src="/images/pasted-69.png" alt="upload successful"></p><p>当然在tomcat的默认站点目录webapps下会生成一个bdqnweb应用</p><p><img src="/images/pasted-70.png" alt="upload successful"></p><p>访问bdqnweb应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/bdqnweb/</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-71.png" alt="upload successful"></p><h6 id="第二种发布方式"><a href="#第二种发布方式" class="headerlink" title="第二种发布方式"></a>第二种发布方式</h6><p><img src="/images/pasted-72.png" alt="upload successful"><br><strong>发布成功后顶部显示OK</strong></p><p><img src="/images/pasted-73.png" alt="upload successful"><br>/hello不需要在webapps目录下提前创建，发布成功后会自动生成</p><p><img src="/images/pasted-74.png" alt="upload successful"><br>访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 127.0.0.1:8080/hello</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>设置允许其他地址访问<strong>manager</strong>管理界面（<code>默认地址为127.0.0.1可访问</code>）<br>修改配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/tomcat/webapps/manager/META-INF/context.xml</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-75.png" alt="upload successful"></p><p>*<em>（^.</em>$代表允许所有地址可访问）**</p><p>重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>验证访问</p><p><img src="/images/pasted-76.png" alt="upload successful"></p><p><img src="/images/pasted-77.png" alt="upload successful"></p><h5 id="JVM常用内存优化参数"><a href="#JVM常用内存优化参数" class="headerlink" title="JVM常用内存优化参数"></a>JVM常用内存优化参数</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/bin/catalina.sh</span><br><span class="line">添加：</span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-server -Xms512M -Xmx512M -XX:NewSize=300M -XX:OldSize=100M -XX:SurvivorRatio=2&quot;</span></span><br><span class="line">-Xms512：指定JVM初始化分配的内存</span><br><span class="line">-Xmx512：指定JVM最大获取到的内存</span><br><span class="line">-XX:NewSize=<span class="number">300</span>M：指定新生代的内存容量</span><br><span class="line">-XX:OldSize=<span class="number">100</span>M：指定年老代的内存容量</span><br><span class="line">-XX:SurvivorRatio=<span class="number">2</span>：指定Survivor与Eden的占比</span><br><span class="line">#-XX:PermSize：指定持久代的容量</span><br><span class="line">#-XX:PermMaxSize：指定持久代的最大容量</span><br><span class="line">#-XX:NewMaxSize：指定新生代的最大内存容量</span><br></pre></td></tr></table></figure><p>指定线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/tomcat/conf/server.xml</span><br><span class="line">修改：去掉注释（<span class="number">56</span>行）</span><br><span class="line">指定线程池，名字为threadpool，最大可开启线程数量为<span class="number">150</span>个，最下空闲进程数量<span class="number">4</span>个</span><br><span class="line">    &lt;Executor name=<span class="string">&quot;threadPool&quot;</span> namePrefix=<span class="string">&quot;catalina-exec-&quot;</span></span><br><span class="line">        maxThreads=<span class="string">&quot;150&quot;</span> minSpareThreads=<span class="string">&quot;4&quot;</span>/&gt;</span><br><span class="line">连接器引用指定名字对应的线程池</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">        executor=<span class="string">&quot;threadPool&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证访问</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># firefox www.new.com:8080/manager</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-78.png" alt="upload successful"></p><p><img src="/images/pasted-79.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Tomcat-是什么&quot;&gt;&lt;a href=&quot;#Tomcat-是什么&quot; class=&quot;headerlink&quot; title=&quot;Tomcat 是什么?&quot;&gt;&lt;/a&gt;Tomcat 是什么?&lt;/h5&gt;&lt;p&gt;Tomcat 由JAVA语言开发的Java容器，实现了对 Servlet</summary>
      
    
    
    
    <category term="微服务" scheme="http://example.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ansible常用模块</title>
    <link href="http://example.com/2020/09/18/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2020/09/18/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</id>
    <published>2020-09-18T09:32:00.000Z</published>
    <updated>2020-09-18T12:46:08.419Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ping模块："><a href="#ping模块：" class="headerlink" title="ping模块："></a>ping模块：</h6><p>检测各主机之间的连接状况</p><p>如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible all -m ping</span></span><br></pre></td></tr></table></figure><h6 id="command模块："><a href="#command模块：" class="headerlink" title="command模块："></a>command模块：</h6><p>主要用于执行简单的shell命令：单个命令</p><p>如：ls、cat等类似简单命令，不带有管道符类似操作的使用shell模块</p><p>例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible dbserver -m command -a &#x27;ls /root&#x27;</span></span><br><span class="line"><span class="comment"># 配置主机清单时dbserver中，只写入了1.4，所以结果只有1.4主机运行ls /root</span></span><br><span class="line">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">initial-setup-ks.cfg</span><br><span class="line">公共</span><br><span class="line">模板</span><br><span class="line">视频</span><br><span class="line">图片</span><br><span class="line">文档</span><br><span class="line">下载</span><br><span class="line">音乐</span><br><span class="line">桌面</span><br></pre></td></tr></table></figure><h6 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h6><p>执行linux复杂命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible dbserver -m shell -a &#x27;ls /root/ | wc -l&#x27;</span></span><br><span class="line">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h6 id="args"><a href="#args" class="headerlink" title="args"></a>args</h6><p>如果在编译安装包时，需要进入目录进行配置，使用以下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- shell: ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">  args:</span><br><span class="line">    <span class="built_in">chdir</span>: 解压包路径</span><br></pre></td></tr></table></figure><h6 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h6><p>执行计划任务，用于为被控制端设置自动化任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 设置任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible dbserver -m cron -a &#x27;minute=&quot;*/2&quot; job=&quot;date &gt;&gt; /tmp/date.txt&quot; name=&quot;show date&quot; state=present&#x27;</span></span><br><span class="line">state=persent:一般表示新增</span><br><span class="line"><span class="comment"># 删除任务，只需要指定name即可</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible dbserver -m cron -a &#x27; name=&quot;show date&quot; state=absent&#x27;</span></span><br><span class="line">state=absent：一般表示移除，可以用来删除计划任务</span><br><span class="line"><span class="comment"># cron的其他关键字参考</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible-doc -s cron</span></span><br></pre></td></tr></table></figure><h6 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h6><p>常用操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名<span class="comment"># 创建普通用户</span></span><br><span class="line">passwd 用户名<span class="comment"># 设置用户密码</span></span><br><span class="line">useradd -M -s /sbin/nologin 用户名<span class="comment"># 创建的用户没有家目录，不能登录</span></span><br><span class="line">useradd -u 用户id -g gid 用户名   <span class="comment"># 创建用户时指定uid和gid</span></span><br><span class="line">userdel -r 用户<span class="comment"># 连同用户家目录一起删除用户</span></span><br></pre></td></tr></table></figure><p>以上操作通过ansible来完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m user -a <span class="string">&#x27;name=用户名 state=present&#x27;</span><span class="comment"># 创建用户</span></span><br><span class="line"><span class="comment"># openssl passwd &quot;123.com&quot;用来获取加密后的密码</span></span><br><span class="line">ansible 操作对象 -m user -a <span class="string">&#x27;name=用户名 password=&quot;加密密码&quot; state=present&#x27;</span>   <span class="comment"># 创建用户并设置密码</span></span><br><span class="line">ansible 操作对象 -m shell -a <span class="string">&#x27;echo &quot;123.com&quot; | passwd --stdin 用户名&#x27;</span>   <span class="comment"># 设置用户密码</span></span><br><span class="line"><span class="comment"># 创建无家目录，不能登录的用户</span></span><br><span class="line">ansible 操作对象 -m user -a <span class="string">&#x27;name=用户名 create_home=no shell=/sbin/nologin state=present&#x27;</span>  </span><br><span class="line"><span class="comment"># 创建用户是指定uid和基本组</span></span><br><span class="line">ansible 操作对象 -m user -a <span class="string">&#x27;name=用户名 uid=id号 group=组名 state=present&#x27;</span></span><br><span class="line"><span class="comment"># 连同用户家目录一同删除</span></span><br><span class="line">ansible 操作对象 -m user -a <span class="string">&#x27;name=用户名 remove=yes state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加组</span><br><span class="line">ansible 操作对象 -m group -a <span class="string">&#x27;name=组名 system=yes state=present gid=ID号&#x27;</span></span><br><span class="line">system=yes：是否是公共组</span><br><span class="line">删除组</span><br><span class="line">ansible 操作对象 -m group -a <span class="string">&#x27;name=组名 state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h6><p>1、从主控端复制文件到被控端（类似scp）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a <span class="string">&#x27;src=主控端文件路径 dest=被控端保存路径&#x27;</span></span><br><span class="line"><span class="comment"># 在被控端查看是否复制文件成功</span></span><br><span class="line">ansible all -m shell -a <span class="string">&#x27;ls 被控端保存文件路径&#x27;</span></span><br></pre></td></tr></table></figure><p>2、主控端控制被控端复制和粘贴被控端的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m copy -a <span class="string">&#x27;src=被控端源文件路径 dest=被控端目标位置 remote_src=yes&#x27;</span></span><br><span class="line"><span class="comment"># 验证ansible的幂等性，remote_src=yes，当发现同文件名时，不执行此命令</span></span><br><span class="line">ansible 操作对象 -m copy -a <span class="string">&#x27;src=被控端源文件路径 dest=被控端目标位置 remote_src=yes backup=yes&#x27;</span></span><br><span class="line"><span class="comment"># 修改被控端/root/resolv.conf的内容，使其可以发生文件覆盖，此时在加上backup进行文件覆盖前的备份</span></span><br></pre></td></tr></table></figure><h6 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h6><p>1、修改文件属性（owner（属主） group（属组） mode（权限） 对应linux命令 chown chmod</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改变属主属组</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;path=被控端都存在的要修改属主属组的文件路径 owner=被控端都存在的用户 group=被控端都存在的组 recurse=yes&#x27;</span></span><br><span class="line"> recurse=yes：表示递归设置属主属组</span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;path=被控端存在的文件路径 mode=7777 recurse=yes&#x27;</span></span><br><span class="line"> 使用mnnn样式的四位8进制数表示，recurse=yes：对当前目录中的所有内容递归权限</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2、软链接、硬链接</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line"><span class="comment"># 软链接</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;src=被控端源文件 dest=软链接文件路径 state=link&#x27;</span></span><br><span class="line"><span class="comment"># 硬链接</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;src=被控端源文件 dest=硬链接文件路径 state=hard&#x27;</span></span><br></pre></td></tr></table></figure><p>3、创建文件和目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;path=文件路径及文件名 state=touch&#x27;</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;path=目录路径及目录名 state=directory&#x27;</span></span><br><span class="line"><span class="comment"># 删除文件或者目录</span></span><br><span class="line">ansible 操作对象 -m file -a <span class="string">&#x27;path=被控端删除文件或目录路径 state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h6><p>主控端控制被控端，使其使用yum安装rpm包</p><p>前提：被控端的yum可用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装rpm某包</span></span><br><span class="line">ansible 操作对象 -m yum -a <span class="string">&#x27;name=包名,包名1... state=installed/present    # 默认不写state是installed/present</span></span><br><span class="line"><span class="string"># 卸载rpm包</span></span><br><span class="line"><span class="string">ansible 操作对象 -m yum -a &#x27;</span>name=包名,包名1... state=removed/absent</span><br></pre></td></tr></table></figure><h6 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h6><p>操控被控端开启、关闭、重启、重载（视具体服务而定）</p><p>notice：service可用管理rpm包安装的服务，源码安装的服务建议使用shell模块直接打命令</p><p>服务状态：started/stopped/restarted/reloaded</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m service -a <span class="string">&#x27;name=服务名 state=服务状态&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="hostname模块"><a href="#hostname模块" class="headerlink" title="hostname模块"></a>hostname模块</h6><p>修改主机名操作</p><p>hostname 主机名 临时</p><p>hostnamectl set-hostname 主机名 永久</p><p>vim /etc/hosts 修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m hostname -a <span class="string">&#x27;name=主机名&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h6><p>用于将主控端的脚本在被控端执行，shell脚本和python脚本</p><p>写一个简单创建用户的脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        useradd user<span class="variable">$i</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;123.com&#x27;</span> | passwd --stdin user<span class="variable">$i</span></span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>添加脚本可执行权限</p><p><code>chmod +x users.sh </code><br>使用script模块执行脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">ansible 操作对象 -m script -a <span class="string">&#x27;脚本文件在主控端的路径&#x27;</span></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">ansible 操作对象 -m shell -a <span class="string">&#x27;tail /etc/passwd&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h6><p>用于获取被控端的ansible变量值，主要用于模板剧本中，可以利用变量，实现对被控端的快速配置和差异化配置</p><p>ansible变量：用于记录所有主控端和被控端的连接信息</p><p>ansible dbserver -m setup 查看所有的变量值</p><p>常用选项：ansible 操作对象 -m setup -a ‘filter=”<em>变量关键字</em>“‘ filter用于筛选变量</p><p>如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于cpu的变量</span></span><br><span class="line">ansible dbserver -m setup -a <span class="string">&#x27;filter=&quot;*cpu*&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h6><p>拿取被控端文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存放时，会将每台被控端创建一个ip目录</span></span><br><span class="line">ansible 操作对象 -m fetch -a <span class="string">&#x27;src=被控端文件路径 dest=主控端存放路径&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="replace模块"><a href="#replace模块" class="headerlink" title="replace模块"></a>replace模块</h6><p>可以实现对文件内容的替换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换文件中所有匹配的字符</span></span><br><span class="line">ansible dbserver -m replace -a <span class="string">&#x27;path=被控端文件路径 regexp=&#x27;</span>匹配要替换的字符<span class="string">&#x27; replace=&#x27;</span>替换后的字符<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 替换指定行</span></span><br></pre></td></tr></table></figure><h6 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h6><p>主要用于主控端使用模板配置被控端配置文件的场景</p><p>需要用到模板文件，文件必须以.j2结尾</p><p>以web应用apache为例</p><p>主控端和被控端都通过yum模块按照了httpd，在主控端更改配置文件，并重命名.j2结尾</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible webserver -m template -a <span class="string">&#x27;src=.j2文件路径 dest=被控端主配置文件路径&#x27;</span></span><br><span class="line">如：</span><br><span class="line">ansible webserver -m template -a <span class="string">&#x27;src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以在主控端配置文件中引用变量，在主机清单文件中修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/ansible/hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">192.168.1.5 http_port=88</span><br><span class="line">192.168.1.6 http_port=90</span><br></pre></td></tr></table></figure><p>修改.j2文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim httpd.conf.j2 </span></span><br><span class="line"> &#123;&#123;http_port&#125;&#125; 引用变量</span><br><span class="line">ServerName www.example.com &#123;&#123;http_port&#125;&#125;</span><br></pre></td></tr></table></figure><p>将.j2文件传送</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible webserver -m template -a <span class="string">&#x27;src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf&#x27;</span></span><br></pre></td></tr></table></figure><p>这个时候查看被控端的配置文件中，发现1.5的端口为88,16的端口为90</p><h6 id="unarchive模块"><a href="#unarchive模块" class="headerlink" title="unarchive模块"></a>unarchive模块</h6><p>将主控端的压缩文件，解压后放在被控端</p><p>在主控端有一个nginx安装包，执行以下操作直接解压到被控端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m unarchive -a <span class="string">&#x27;src=主控端安装包路径 dest=解压后的被控端存放路径&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="lineinfile模块"><a href="#lineinfile模块" class="headerlink" title="lineinfile模块"></a>lineinfile模块</h6><p>修改配置文件时，修改指定行的内容，或者添加到指定行前和指定行后</p><p>可以实现在文件加入内容</p><p>命令参数说明：</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">path</td><td align="center">指定要操作的文件对象</td></tr><tr><td align="center">egexp</td><td align="center">匹配条件</td></tr><tr><td align="center">insertbefore</td><td align="center">在指定行前插入</td></tr><tr><td align="center">insertafter</td><td align="center">在指定行后插入</td></tr><tr><td align="center">line</td><td align="center">要写入的文件内容</td></tr><tr><td align="center">state</td><td align="center">present（添加）absent（删除）</td></tr></tbody></table><p>insertbefore和insertafter的特殊值</p><p>BOF：begin of file（文件起始位置）<br>EOF：end of file （文件结束位置）</p><p>使用insertbefore和insertafter，还有regexp时，需要指定state，其他不需要</p><p>在文件开头插入内容 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m lineinfile -a <span class="string">&#x27;path=文件路径 insertbefore=BOF line=&quot;插入的内容&quot;&#x27;</span></span><br><span class="line">如：</span><br><span class="line">ansible dbserver -m lineinfile -a <span class="string">&#x27;path=/root/nginx.conf insertbefore=BOF line=&quot;# nihao a&quot;&#x27;</span></span><br><span class="line"> 在nginx.conf文件开头添<span class="string">&quot;# nihao a&quot;</span></span><br></pre></td></tr></table></figure><p>在文件结束插入内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m lineinfile -a <span class="string">&#x27;path=文件路径 insertbefore=EOF line=&quot;插入的内容&quot;&#x27;</span></span><br><span class="line">如：</span><br><span class="line">ansible dbserver -m lineinfile -a <span class="string">&#x27;path=/root/nginx.conf insertbefore=EOF line=&quot;# nihao a&quot;&#x27;</span></span><br><span class="line"> 在nginx.conf文件的末尾添加<span class="comment"># nihao a</span></span><br></pre></td></tr></table></figure><p>在文件指定位置加入内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m lineinfile -a <span class="string">&#x27;path=文件路径 insertbefore=&quot;指定位置的内容&quot; line=&quot;插入的内容&quot; state=present</span></span><br><span class="line"><span class="string">如：</span></span><br><span class="line"><span class="string">ansible dbserver -m lineinfile -a &#x27;</span>path=/root/nginx.conf insertbefore=<span class="string">&quot;  server &#123;&quot;</span> line=<span class="string">&quot;root html&quot;</span> state=present<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> 在nginx.conf的server &#123;的上一行添加root html</span></span><br></pre></td></tr></table></figure><p>删除文件中的指定内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible 操作对象 -m lineinfile -a <span class="string">&#x27;path=文件路径 regexp=&quot;要删除的内容&quot; line=&quot;插入的内容&quot; state=absent</span></span><br><span class="line"><span class="string">如：</span></span><br><span class="line"><span class="string">ansible dbserver -m lineinfile -a &#x27;</span>path=/root/nginx.conf regexp=<span class="string">&quot; server &#123;&quot;</span> state=absent<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> 删除nginx.conf的server &#123; 这一行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;ping模块：&quot;&gt;&lt;a href=&quot;#ping模块：&quot; class=&quot;headerlink&quot; title=&quot;ping模块：&quot;&gt;&lt;/a&gt;ping模块：&lt;/h6&gt;&lt;p&gt;检测各主机之间的连接状况&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="Ansible" scheme="http://example.com/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible自动化运维工具</title>
    <link href="http://example.com/2020/09/18/Ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2020/09/18/Ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/</id>
    <published>2020-09-18T09:16:00.000Z</published>
    <updated>2020-09-18T09:32:10.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/timg.jpg" alt="upload successful"></p><h5 id="Ansible及自动化介绍"><a href="#Ansible及自动化介绍" class="headerlink" title="Ansible及自动化介绍"></a>Ansible及自动化介绍</h5><p>ansible：提高效率的工具，实现自动化运维</p><p>自动化：系统自动化（PXE+KS/PXE+COBBLER)<br>程序自动化（Ansible/Saltstack/Puppet）<br>代码自动化（Jenkins）</p><p>程序自动化工具分为两类：</p><p>（1）C/S架构：Saltstack /Puppet</p><p>（2）无客户端模式：Ansible（主控端/被控端）</p><p>区别：</p><p>Ansible：基于python开发，使用ssh协议，没有客户端，200-300台，适用于中小型应用环境，一个系统控制多台主机，有两个角色：主控端和被控端</p><p>Saltstack ：基于python开发，支持统一管理，比较轻量级 支持管理500台服务器，python编写，需要部署agent，主控端通过安装在被控端的代理来对被控端进行操作</p><p>Puppet：Ruby语言编写，重型程序，适合大型环境，谷歌公司在用，软件过于复杂，国内一般不到1000+</p><h5 id="Ansible特性"><a href="#Ansible特性" class="headerlink" title="Ansible特性"></a>Ansible特性</h5><ul><li>模块化：调用特定的模块，完成特定的任务，约3000模块，每个模块功能不同</li><li>有paramiko（基于ssh开发，主要做远程控制）PyYAML（可以实现剧本）Jinja2（模板语言），这三个模块是Ansible的核心</li><li>支持自定义模块（python）</li><li>安全，基于openssh</li><li>支持playbook编排任务（PyYAML)</li><li>幂等性：一个任务执行一遍和n变效果一样，不会因为重复执行而带来意外情况（如：复制文件时，执行两次会报是否覆盖，而使用Ansible可以避免这种情况，后面copy模块会讲到）</li></ul><h5 id="部署Ansible环境"><a href="#部署Ansible环境" class="headerlink" title="部署Ansible环境"></a>部署Ansible环境</h5><hr><p>实验环境：四台linux服务器</p><ul><li><p>192.168.1.1（用作Ansible服务器）</p></li><li><p>192.168.1.4（被控端）</p></li><li><p>192.168.1.5（被控端）</p></li><li><p>192.168.1.6（被控端）</p></li></ul><p>实验目的：使用控制端来控制3个被控端工作</p><p>实验步骤：<br>控制端部署<br>在控制端（192.168.1.1）安装epel-release和Ansible（使用网络yum）</p><p>epel-release：Extra Packages for Enterprise Linux（企业版linux扩展包）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建yum缓存，加快yum安装速度</span><br><span class="line">[root@localhost ~]# yum makecache fast</span><br><span class="line">epel是一个系统扩展yum源</span><br><span class="line">[root@localhost ~]# yum -y install epel-release</span><br><span class="line">[root@localhost ~]# yum -y install ansible</span><br></pre></td></tr></table></figure><h5 id="设置控制端免密登录被控端"><a href="#设置控制端免密登录被控端" class="headerlink" title="设置控制端免密登录被控端"></a>设置控制端免密登录被控端</h5><p>通过ssh密钥对实现</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen# 生成私钥和公钥，一直回车即可</span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"><span class="function">Enter file in which to save the <span class="title">key</span> <span class="params">(/root/.ssh/id_rsa)</span>: </span></span><br><span class="line"><span class="function">Created directory &#x27;/root/.ssh&#x27;.</span></span><br><span class="line"><span class="function">Enter <span class="title">passphrase</span> <span class="params">(empty <span class="keyword">for</span> no passphrase)</span>: </span></span><br><span class="line"><span class="function">Enter same passphrase again: </span></span><br><span class="line"><span class="function">Your identification has been saved in /root/.ssh/id_rsa.</span></span><br><span class="line"><span class="function">Your <span class="keyword">public</span> key has been saved in /root/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="function">The key fingerprint is:</span></span><br><span class="line"><span class="function">SHA256:2puXlUxjnsxKrVhnGbNahVhbZLJrMr9q/8B9uDr144Y root</span></span><br><span class="line"><span class="function">The key&#x27;s randomart image is:</span></span><br><span class="line"><span class="function">+---[RSA 2048]----+</span></span><br><span class="line"><span class="function">|            ..o  |</span></span><br><span class="line"><span class="function">|            .+.  |</span></span><br><span class="line"><span class="function">|           o.+   |</span></span><br><span class="line"><span class="function">|          . O..  |</span></span><br><span class="line"><span class="function">|        S oOoX   |</span></span><br><span class="line"><span class="function">|       o  o*/... |</span></span><br><span class="line"><span class="function">|      . .+ X+.+..|</span></span><br><span class="line"><span class="function">|        .oB .E </span>=.|</span><br><span class="line">|        oo.o++=..|</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"> </span><br><span class="line"># 默认生成在当前用户的.ssh/目录下</span><br><span class="line">[root@localhost ~]# ls /root/.ssh</span><br><span class="line">id_rsa  id_rsa.pub</span><br><span class="line"> </span><br><span class="line"># 将生成的公钥文件发送到指定的控制端，需要用到root密码</span><br><span class="line">[root@localhost ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.1.4</span><br><span class="line">[root@localhost ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.1.5</span><br><span class="line">[root@localhost ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.1.6</span><br><span class="line"># 此时在1.4的被控端的用户目录下的.ssh目录下会生成一个authorized_keys文件</span><br><span class="line">[root@localhost ~]# ls /root/.ssh</span><br><span class="line">authorized_keys</span><br><span class="line"># 在控制端使用ssh登录到1.4，发现不使用密码即可</span><br><span class="line">[root@localhost ~]# ssh root@192.168.1.4</span><br></pre></td></tr></table></figure><h5 id="配置Ansible的配置文件"><a href="#配置Ansible的配置文件" class="headerlink" title="配置Ansible的配置文件"></a>配置Ansible的配置文件</h5><p>ansible.cfg Ansible主配置文件</p><p>hosts 被控端的主机清单</p><p>roles 角色</p><p>修改主机清单：将被控端写入</p><p>在使用ansible操作时，可以通过分组名对，组中所有主机进行相同操作</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[分组名]</span><br><span class="line">被控端ip1</span><br><span class="line">被控端ip2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在文件末尾添加，如果有DNS，直接写域名也可以</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/ansible/hosts </span></span><br><span class="line">添加：</span><br><span class="line">[dbserver]</span><br><span class="line">192.168.1.4<span class="comment"># 被控端</span></span><br><span class="line"> </span><br><span class="line">[webserver]</span><br><span class="line">192.168.1.5<span class="comment"># 被控端</span></span><br><span class="line">192.168.1.6<span class="comment"># 被控端</span></span><br></pre></td></tr></table></figure><h5 id="Ansible简单操作"><a href="#Ansible简单操作" class="headerlink" title="Ansible简单操作"></a>Ansible简单操作</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ansible --version<span class="comment"># 查看ansible版本</span></span><br><span class="line">ansible-doc -l<span class="comment"># 查看ansible支持模块</span></span><br><span class="line">ansible-doc -s 模块名<span class="comment"># 关于模块的帮助信息</span></span><br><span class="line">如：ansible-doc -s ping</span><br><span class="line">ansible-doc -h   <span class="comment"># 帮助信息</span></span><br><span class="line"> </span><br><span class="line">-------关于模块操作的语法-------</span><br><span class="line">ansible 操作对象 -m 模块名 -a <span class="string">&#x27;模块参数&#x27;</span></span><br><span class="line">-a：在某些模块中可以省略</span><br><span class="line">ansible 操作对象 -m 模块名 -a <span class="string">&#x27;模块参数&#x27;</span> --<span class="built_in">limit</span> x.x.x.x</span><br><span class="line">    --<span class="built_in">limit</span>：可以指定操作对象中的某个ip来执行该模块</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/timg.jpg&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;Ansible及自动化介绍&quot;&gt;&lt;a href=&quot;#Ansible及自动化介绍&quot; class=&quot;headerlink&quot; title=&quot;Ansibl</summary>
      
    
    
    
    <category term="Ansible" scheme="http://example.com/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>强制修改Linux系统的Root密码的办法</title>
    <link href="http://example.com/2020/09/18/%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84Root%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2020/09/18/%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84Root%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%9E%E6%B3%95/</id>
    <published>2020-09-18T08:17:00.000Z</published>
    <updated>2020-09-18T12:45:46.610Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-在Linux-的引导界面按-E-键来进入内核编辑界面"><a href="#1-在Linux-的引导界面按-E-键来进入内核编辑界面" class="headerlink" title="1.在Linux 的引导界面按 E 键来进入内核编辑界面"></a>1.在Linux 的引导界面按 E 键来进入内核编辑界面</h5><p><img src="/images/test0.png" alt="upload successful"></p><h5 id="2-按键盘下键，找到Linux16这一行，然后在最后边加入-rd-break命令，然后按Ctrl-X来重启修改过的内核"><a href="#2-按键盘下键，找到Linux16这一行，然后在最后边加入-rd-break命令，然后按Ctrl-X来重启修改过的内核" class="headerlink" title="2.按键盘下键，找到Linux16这一行，然后在最后边加入 rd.break命令，然后按Ctrl+X来重启修改过的内核!"></a>2.按键盘下键，找到Linux16这一行，然后在最后边加入 rd.break命令，然后按Ctrl+X来重启修改过的内核!</h5><p><img src="/images/test1.png" alt="upload successful"></p><h5 id="3-之后进入“紧急求援模式”"><a href="#3-之后进入“紧急求援模式”" class="headerlink" title="3. 之后进入“紧急求援模式”"></a>3. 之后进入“紧急求援模式”</h5><p>   输入以下命令（输入完一行回车！）</p><p>   mount -o remount,rw /sysroot</p><p>   chroot /sysroot</p><p>   passwd    # 当输入完这一行会系统会让你输入新密码和确认新密码，按照系统提示输入即可！</p><p>   touch /.autorelabel</p><p>   exit</p><p>   reboot<br><img src="/images/test2.png" alt="upload successful"></p><h5 id="4-接着等待重启以后就可以使用root账号了"><a href="#4-接着等待重启以后就可以使用root账号了" class="headerlink" title="4.接着等待重启以后就可以使用root账号了"></a>4.接着等待重启以后就可以使用root账号了</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-在Linux-的引导界面按-E-键来进入内核编辑界面&quot;&gt;&lt;a href=&quot;#1-在Linux-的引导界面按-E-键来进入内核编辑界面&quot; class=&quot;headerlink&quot; title=&quot;1.在Linux 的引导界面按 E 键来进入内核编辑界面&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>升级Openssh详细步骤</title>
    <link href="http://example.com/2020/09/11/%E5%8D%87%E7%BA%A7Openssh%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2020/09/11/%E5%8D%87%E7%BA%A7Openssh%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-09-11T07:34:00.000Z</published>
    <updated>2020-09-13T01:45:22.787Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><p>1.1、下载相关软件包</p><blockquote><p>OpenSSH需要依赖ZLIB和OpenSSL，因此需要从官网下载三者的源码包。需要注意的是：OpenSSH最新版8.1p1依赖的OpenSSL版本为1.0.2k，而不是其最新版1.1.0e（使用此版会升级失败）,ZLIB可以使用最新 版1.2.11。 </p></blockquote><p>三者源码下载地址：</p><pre><code> http://www.zlib.net/ http://www.openssl.org/ http://www.openssh.org/</code></pre><p>1.2、查看系统当前软件版本</p><pre><code># rpm -q zlib# openssl version# ssh -V</code></pre><p>1.3、配置在线yum源</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd <span class="regexp">/etc/yum</span>.repos.d</span><br><span class="line"># rm -rf *             #删除当前所有yum源文件</span><br><span class="line"></span><br><span class="line"># wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">6</span>.repo   #连接阿里云在线源</span><br></pre></td></tr></table></figure><p>1.4、安装telnet服务并启用</p><blockquote><p>因升级OpenSSH过程中需要卸载现有OpenSSH, 因此为了保持服务器的远程连接可用，需要启用telnet服务作为替代，如升级出现问题，也可通过telnet登录服务器进行回退。</p></blockquote><p>   A、安装telnet服务</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># yum -y install telnet-server*</span></span><br></pre></td></tr></table></figure><p>   B、启用telnet</p><p>   先关闭防火墙，否则telnet可能无法连接</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># service iptables stop</span></span><br><span class="line"><span class="meta"># chkconfig iptables off</span></span><br><span class="line"><span class="meta"># vi /etc/xinetd.d/telnet</span></span><br><span class="line">将其中disable字段的yes改为no以启用telnet服务</span><br><span class="line"><span class="meta"># mv /etc/securetty /etc/securetty.old          #允许root用户通过telnet登录</span></span><br><span class="line"><span class="meta"># /etc/init.d/xinetd start       #启动telnet服务</span></span><br><span class="line"><span class="meta"># chkconfig xinetd on              #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统</span></span><br><span class="line"><span class="meta"># telnet [ip]                 #新开启一个远程终端以telnet登录验证是否成功启用</span></span><br></pre></td></tr></table></figure><p>1.5、安装编译所需工具包</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># yum -y install gcc pam-devel zlib-devel</span></span><br></pre></td></tr></table></figure><h4 id="2、正式升级"><a href="#2、正式升级" class="headerlink" title="2、正式升级"></a>2、正式升级</h4><p>2.1、升级ZLIB</p><p>A、解压zlib_1.2.11源码并编译</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># tar -zxvf zlib-1.2.11.tar.gz</span></span><br><span class="line"><span class="meta"># cd zlib-1.2.11</span></span><br><span class="line"><span class="meta"># ./configure --prefix=/usr</span></span><br><span class="line"><span class="meta"># make</span></span><br></pre></td></tr></table></figure><p>B、卸载当前zlib</p><blockquote><p>注意：此步骤必须在步骤A执行完毕后再执行，否则先卸载zlib后，/lib64/目录下的zlib相关库文件会被删除，步骤A编译zlib会失败。</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># rpm -e --nodeps zlib </span></span><br></pre></td></tr></table></figure><p>C、安装之前编译好的zlib </p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># make install </span></span><br></pre></td></tr></table></figure><p>在zlib编译目录执行如下命令</p><p>D、共享库注册</p><blockquote><p>zlib安装完成后，会在/usr/lib目录中生产zlib相关库文件，需要将这些共享库文件注册到系统中。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;/usr/lib&#x27;</span> &gt;&gt; /etc/ld.so.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ldconfig <span class="comment">#更新共享库cache</span></span></span><br></pre></td></tr></table></figure><p>2.2、升级OpenSSL</p><p>A、备份当前openssl</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">find</span> / -name openssl</span><br><span class="line">  <span class="regexp">/usr/</span>lib64/openssl</span><br><span class="line">  <span class="regexp">/usr/</span>bin/openssl</span><br><span class="line">  <span class="regexp">/etc/</span>pki<span class="regexp">/ca-trust/</span>extracted/openssl</span><br><span class="line"></span><br><span class="line"># mv <span class="regexp">/usr/</span>lib64<span class="regexp">/openssl /u</span>sr<span class="regexp">/lib64/</span>openssl.old</span><br><span class="line"># mv <span class="regexp">/usr/</span>bin<span class="regexp">/openssl /u</span>sr<span class="regexp">/bin/</span>openssl.old</span><br><span class="line"># mv <span class="regexp">/etc/</span>pki<span class="regexp">/ca-trust/</span>extracted<span class="regexp">/openssl /</span>etc<span class="regexp">/pki/</span>ca-trust<span class="regexp">/extracted/</span>openssl.old</span><br><span class="line"></span><br><span class="line">如下两个库文件必须先备份，因系统内部分工具（如yum、wget等）依赖此库，而新版OpenSSL不包含这两个库</span><br><span class="line"># cp <span class="regexp">/usr/</span>lib64<span class="regexp">/libcrypto.so.10 /u</span>sr<span class="regexp">/lib64/</span>libcrypto.so.<span class="number">10</span>.old</span><br><span class="line"># cp <span class="regexp">/usr/</span>lib64<span class="regexp">/libssl.so.10 /u</span>sr<span class="regexp">/lib64/</span>libssl.so.<span class="number">10</span>.old</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>B、卸载当前openssl</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -qa | grep openssl</span></span><br><span class="line">   <span class="attribute">openssl</span>-<span class="number">1</span>.<span class="number">0</span>.<span class="number">1</span>e-<span class="number">42</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -e --nodeps openssl-1.0.1e-42.el6.x86_64</span></span><br><span class="line"><span class="comment"># rpm -qa | grep openssl</span></span><br></pre></td></tr></table></figure><p>C、解压openssl_1.0.2k源码并编译安装</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># tar -zxvf openssl-1.0.2k.tar.gz</span></span><br><span class="line"><span class="meta"># cd openssl-1.0.2k</span></span><br><span class="line"><span class="meta"># ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib                                #必须加上--shared，否则编译时会找不到新安装的openssl的库而报错</span></span><br><span class="line"><span class="meta"># make</span></span><br><span class="line"><span class="meta"># make test                             #必须执行这一步结果为pass才能继续，否则即使安装完成，ssh也无法使用</span></span><br><span class="line"><span class="meta"># make install</span></span><br><span class="line"><span class="meta"># openssl version -a                           #查看是否升级成功</span></span><br></pre></td></tr></table></figure><p>D、恢复共享库</p><blockquote><p>由于OpenSSL_1.0.2k不提供libcrypto.so.10和libssl.so.10这两个库，而yum、wget等工具又依赖此库，因此需要将先前备份的这两个库进行恢复，其他的可视情况考虑是否恢复。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mv <span class="regexp">/usr/</span>lib64<span class="regexp">/libcrypto.so.10.old  /u</span>sr<span class="regexp">/lib64/</span>libcrypto.so.<span class="number">10</span></span><br><span class="line"># mv <span class="regexp">/usr/</span>lib64<span class="regexp">/libssl.so.10.old   /u</span>sr<span class="regexp">/lib64/</span>libssl.so.</span><br></pre></td></tr></table></figure><p>2.3、升级OpenSSH</p><p>A、备份当前openssh</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mv <span class="regexp">/etc/</span>ssh  <span class="regexp">/etc/</span>ssh.old</span><br></pre></td></tr></table></figure><p>B、卸载当前openssh</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -qa | grep openssh</span></span><br><span class="line"><span class="attribute">openssh</span>-clients-<span class="number">5</span>.<span class="number">3</span>p<span class="number">1</span>-<span class="number">111</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"><span class="attribute">openssh</span>-server-<span class="number">5</span>.<span class="number">3</span>p<span class="number">1</span>-<span class="number">111</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"><span class="attribute">openssh</span>-<span class="number">5</span>.<span class="number">3</span>p<span class="number">1</span>-<span class="number">111</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"><span class="attribute">openssh</span>-askpass-<span class="number">5</span>.<span class="number">3</span>p<span class="number">1</span>-<span class="number">111</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -e --nodeps openssh-5.3p1-111.el6.x86_64</span></span><br><span class="line"><span class="comment"># rpm -e --nodeps openssh-server-5.3p1-111.el6.x86_64</span></span><br><span class="line"><span class="comment"># rpm -e --nodeps openssh-clients-5.3p1-111.el6.x86_64</span></span><br><span class="line"><span class="comment"># rpm -e --nodeps openssh-askpass-5.3p1-111.el6.x86_64</span></span><br><span class="line"><span class="comment"># rpm -qa | grep openssh                # 查看是否卸载成功</span></span><br></pre></td></tr></table></figure><p>C、openssh安装前环境配置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># install -v -m700 -d <span class="regexp">/var/</span>lib/sshd</span><br><span class="line"># chown -v root:sys <span class="regexp">/var/</span>lib/sshd</span><br><span class="line"># groupadd -g <span class="number">50</span> sshd</span><br><span class="line"># useradd -c <span class="string">&#x27;sshd PrivSep&#x27;</span> -d <span class="regexp">/var/</span>lib<span class="regexp">/sshd -g sshd -s /</span>bin/<span class="keyword">false</span> -u <span class="number">50</span> sshd</span><br></pre></td></tr></table></figure><p>D、解压openssh_7.4p1源码并编译安装</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf openssh<span class="number">-8.1</span>p1.tar.gz</span><br><span class="line"># cd openssh<span class="number">-8.1</span>p1</span><br><span class="line"># ./configure --prefix=/usr --sysconfdir=/etc/ssh --<span class="keyword">with</span>-md5-passwords --<span class="keyword">with</span>-pam --<span class="keyword">with</span>-zlib --<span class="keyword">with</span>-openssl-includes=/usr --<span class="keyword">with</span>-privsep-path=/var/lib/sshd</span><br><span class="line"># make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>E、openssh安装后环境配置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在openssh编译目录执行如下命令</span><br><span class="line"># install -v -m755 contrib<span class="regexp">/ssh-copy-id /u</span>sr/bin</span><br><span class="line"># install -v -m644 contrib<span class="regexp">/ssh-copy-id.1 /u</span>sr<span class="regexp">/share/m</span>an/man1</span><br><span class="line"># install -v -m755 -d <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>openssh-<span class="number">8.1</span>p1</span><br><span class="line"># install -v -m644 INSTALL LICENCE OVERVIEW README* <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>openssh-<span class="number">8.1</span>p1</span><br><span class="line"># ssh -V #验证是否升级成功</span><br></pre></td></tr></table></figure><p>F、启用OpenSSH服务</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 在openssh编译目录执行如下目录</span></span><br><span class="line"><span class="meta"># echo &#x27;X11Forwarding yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"># echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config #允许root用户通过ssh登录</span></span><br><span class="line"><span class="meta"># cp -p contrib/redhat/sshd.init /etc/init.d/sshd</span></span><br><span class="line"><span class="meta"># chmod +x /etc/init.d/sshd</span></span><br><span class="line"><span class="meta"># chkconfig --add sshd</span></span><br><span class="line"><span class="meta"># chkconfig sshd on</span></span><br><span class="line"><span class="meta"># chkconfig --list sshd</span></span><br><span class="line"><span class="meta"># /etc/init.d/sshd restart</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果升级操作一直是在ssh远程会话中进行的，上述sshd服务重启命令可能导致会话断开并无法使用ssh再行登入（即ssh未能成功重启），此时需要通过telnet登入再执行sshd服务重启命令。</p></blockquote><h4 id="3、善后工作"><a href="#3、善后工作" class="headerlink" title="3、善后工作"></a>3、善后工作</h4><blockquote><p>新开启远程终端以ssh [ip]登录系统，确认一切正常升级成功后，只需关闭telnet服务以保证系统安全性即可。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mv <span class="regexp">/etc/</span>securetty.old  <span class="regexp">/etc/</span>securetty</span><br><span class="line"># chkconfig xinetd off</span><br><span class="line"># <span class="regexp">/etc/i</span>nit.d/xinetd stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、准备工作&quot;&gt;&lt;a href=&quot;#1、准备工作&quot; class=&quot;headerlink&quot; title=&quot;1、准备工作&quot;&gt;&lt;/a&gt;1、准备工作&lt;/h4&gt;&lt;p&gt;1.1、下载相关软件包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenSSH需要依赖ZLIB和OpenSS</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>本地MySQL数据库迁移到阿里云RDS</title>
    <link href="http://example.com/2020/09/11/%E6%9C%AC%E5%9C%B0MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91RDS/"/>
    <id>http://example.com/2020/09/11/%E6%9C%AC%E5%9C%B0MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91RDS/</id>
    <published>2020-09-11T07:29:00.000Z</published>
    <updated>2020-09-11T07:33:24.994Z</updated>
    
    <content type="html"><![CDATA[<h5 id="连接本地数据库"><a href="#连接本地数据库" class="headerlink" title="连接本地数据库"></a>连接本地数据库</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure><h5 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h5><blockquote><p>首先要在本地创建一个用来迁移的帐号，并给这个帐号设置权限。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>sername：待创建的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录数据库，可以使用百分号（%）<br>password：账号的密码。 </p></blockquote><p>EG：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如，创建一个账号，账号名为dtsmigration</span></span><br><span class="line"><span class="comment"># 密码为Dts123456，并允许从任意主机登录数据库，命令如下。</span></span><br><span class="line">CREATE USER <span class="string">&#x27;dtsmigration&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Dts123456&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT privileges ON databasename.tablename TO <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><blockquote><p>privileges：授予该账号的操作权限，如SELECT、INSERT、UPDATE等，如果要授予该账号所有权限则使用ALL。<br>databasename：数据库名。如果要授予该账号具备所有数据库的操作权限，则使用星号（）。<br>tablename：表名。如果要授予该账号具备所有表的操作权限，则使用星号（）。<br>username：待授权的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录，则使用百分号（%）。<br>WITH GRANT OPTION：授予该账号使用GRANT命令的权限，该参数为可选。</p></blockquote><p>EG:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 授予dtsmigration账号具备所有数据库和表的所有权限</span></span><br><span class="line"><span class="comment"># 并允许从任意主机登录数据库，命令如下。</span></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">&#x27;dtsmigration&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="本地数据库状态"><a href="#本地数据库状态" class="headerlink" title="本地数据库状态"></a>本地数据库状态</h3><h5 id="1-确认源库的binlog是否开启"><a href="#1-确认源库的binlog是否开启" class="headerlink" title="1.确认源库的binlog是否开启"></a>1.确认源库的binlog是否开启</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like <span class="string">&quot;log_bin&quot;</span>;</span><br></pre></td></tr></table></figure><h6 id="不是的话配置一下my-cnf"><a href="#不是的话配置一下my-cnf" class="headerlink" title="不是的话配置一下my.cnf"></a>不是的话配置一下my.cnf</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_bin=mysql_bin</span><br><span class="line">binlog_format=row</span><br><span class="line">server_id=<span class="number">2</span> /<span class="regexp">/设置大于1的整数</span></span><br><span class="line"><span class="regexp">binlog_row_image=full     **/</span><span class="regexp">/当自建MySQL的版本大于5.6时，则必须设置该项**</span></span><br></pre></td></tr></table></figure><h6 id="修改之后重启MySQL"><a href="#修改之后重启MySQL" class="headerlink" title="修改之后重启MySQL"></a>修改之后重启MySQL</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><h5 id="2-确认源库的binlog格式为row模式"><a href="#2-确认源库的binlog格式为row模式" class="headerlink" title="2.确认源库的binlog格式为row模式"></a>2.确认源库的binlog格式为row模式</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like <span class="string">&quot;binlog_format&quot;</span>;</span><br></pre></td></tr></table></figure><h6 id="不是的话配置一下"><a href="#不是的话配置一下" class="headerlink" title="不是的话配置一下"></a>不是的话配置一下</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global binlog_format=ROW;</span><br></pre></td></tr></table></figure><h5 id="3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full"><a href="#3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full" class="headerlink" title="3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full"></a>3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like <span class="string">&quot;binlog_row_image&quot;</span>;</span><br></pre></td></tr></table></figure><h6 id="不是的话配置一下-1"><a href="#不是的话配置一下-1" class="headerlink" title="不是的话配置一下"></a>不是的话配置一下</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global binlog_row_image=full;</span><br></pre></td></tr></table></figure><h5 id="进行迁移"><a href="#进行迁移" class="headerlink" title="进行迁移"></a>进行迁移</h5><blockquote><p>阿里云官方文档<br><a href="https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie">https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie</a><br>需要先设置一下网关<br><a href="https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe">https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe</a><br>注意设置好网关之后要使用无公网:Port的数据库（通过数据库网关DG接入）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;连接本地数据库&quot;&gt;&lt;a href=&quot;#连接本地数据库&quot; class=&quot;headerlink&quot; title=&quot;连接本地数据库&quot;&gt;&lt;/a&gt;连接本地数据库&lt;/h5&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
</feed>
